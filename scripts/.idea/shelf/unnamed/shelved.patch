Index: ../List Classic COM Classes.txt
===================================================================
--- ../List Classic COM Classes.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Classic COM Classes.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : COM and DCOM
-### Category3 : 
-### Description : Retrieves information about all the �classic� COM classes installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ClassicCOMClass")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Component Id: ", objItem.ComponentId
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
Index: ../List Component Categories.txt
===================================================================
--- ../List Component Categories.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Component Categories.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : COM and DCOM
-### Category3 : 
-### Description : Retrieves information about the COM class component categories (COM classes that share common functionalities) found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ComponentCategory")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Category Id: ", objItem.CategoryId
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
Index: ../List Computer Baseboard Properties.txt
===================================================================
--- ../List Computer Baseboard Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Computer Baseboard Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,50 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about the computer baseboard.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_BaseBoard")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    z = objItem.ConfigOptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Config Options: ", x
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Depth: ", objItem.Depth
-    print "Description: ", objItem.Description
-    print "Height: ", objItem.Height
-    print "Hosting Board: ", objItem.HostingBoard
-    print "Hot Swappable: ", objItem.HotSwappable
-    print "Install Date: ", objItem.InstallDate
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "Powered On: ", objItem.PoweredOn
-    print "Product: ", objItem.Product
-    print "Removable: ", objItem.Removable
-    print "Replaceable: ", objItem.Replaceable
-    print "Requirements Description: ", objItem.RequirementsDescription
-    print "Requires DaughterBoard: ", objItem.RequiresDaughterBoard
-    print "Serial Number: ", objItem.SerialNumber
-    print "SKU: ", objItem.SKU
-    print "Slot Layout: ", objItem.SlotLayout
-    print "Special Requirements: ", objItem.SpecialRequirements
-    print "Status: ", objItem.Status
-    print "Tag: ", objItem.Tag
-    print "Version: ", objItem.Version
-    print "Weight: ", objItem.Weight
-    print "Width: ", objItem.Width
Index: ../List Computer Bus Properties.txt
===================================================================
--- ../List Computer Bus Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Computer Bus Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about the computer bus.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Bus")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Bus Num: ", objItem.BusNum
-    print "Bus Type: ", objItem.BusType
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Capabilities: ", objItem.PowerManagementCapabilities
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Computer Chassis Information.txt
===================================================================
--- ../List Computer Chassis Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Computer Chassis Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,73 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Retrieves an integer value indicating the chassis type for a computer (mini-tower, laptop, etc.). The script does not include a description of each value that can be returned.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SystemEnclosure")
-for objItem in colItems:
-    print "Audible Alarm: ", objItem.AudibleAlarm
-    print "Breach Description: ", objItem.BreachDescription
-    print "Cable Management Strategy: ", objItem.CableManagementStrategy
-    print "Caption: ", objItem.Caption
-    z = objItem.ChassisTypes
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Chassis Types: ", x
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Current Required Or Produced: ", objItem.CurrentRequiredOrProduced
-    print "Depth: ", objItem.Depth
-    print "Description: ", objItem.Description
-    print "Heat Generation: ", objItem.HeatGeneration
-    print "Height: ", objItem.Height
-    print "Hot Swappable: ", objItem.HotSwappable
-    print "Install Date: ", objItem.InstallDate
-    print "Lock Present: ", objItem.LockPresent
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Number Of Power Cords: ", objItem.NumberOfPowerCords
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "Powered On: ", objItem.PoweredOn
-    print "Removable: ", objItem.Removable
-    print "Replaceable: ", objItem.Replaceable
-    print "Security Breach: ", objItem.SecurityBreach
-    print "Security Status: ", objItem.SecurityStatus
-    print "Serial Number: ", objItem.SerialNumber
-    z = objItem.ServiceDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Service Descriptions: ", x
-    z = objItem.ServicePhilosophy
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Service Philosophy: ", x
-    print "SKU: ", objItem.SKU
-    print "SMBIOS Asset Tag: ", objItem.SMBIOSAssetTag
-    print "Status: ", objItem.Status
-    print "Tag: ", objItem.Tag
-    z = objItem.TypeDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Type Descriptions: ", x
-    print "Version: ", objItem.Version
-    print "Visible Alarm: ", objItem.VisibleAlarm
-    print "Weight: ", objItem.Weight
-    print "Width: ", objItem.Width
Index: ../List Computer Fan Information.txt
===================================================================
--- ../List Computer Fan Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Computer Fan Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Retrieves information about the cooling fans installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Fan")
-for objItem in colItems:
-    print "Active Cooling: ", objItem.ActiveCooling
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Desired Speed: ", objItem.DesiredSpeed
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Variable Speed: ", objItem.VariableSpeed
Index: ../List Computer Startup Commands.txt
===================================================================
--- ../List Computer Startup Commands.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Computer Startup Commands.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Startup and Shutdown
-### Category3 : 
-### Description : Enumerates all startup commands on a computer, including those found in the Startup folder and those found in the Registry.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_StartupCommand")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Command: ", objItem.Command
-    print "Description: ", objItem.Description
-    print "Location: ", objItem.Location
-    print "Name: ", objItem.Name
-    print "Setting ID: ", objItem.SettingID
-    print "User: ", objItem.User
Index: ../List Current Display Configuration Values.txt
===================================================================
--- ../List Current Display Configuration Values.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Current Display Configuration Values.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,31 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Video and Display
-### Category3 : 
-### Description : Returns information about the current display settings on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DisplayConfiguration")
-for objItem in colItems:
-    print "Bits Per Pel: ", objItem.BitsPerPel
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Device Name: ", objItem.DeviceName
-    print "Display Flags: ", objItem.DisplayFlags
-    print "Display Frequency: ", objItem.DisplayFrequency
-    print "Dither Type: ", objItem.DitherType
-    print "Driver Version: ", objItem.DriverVersion
-    print "ICM Intent: ", objItem.ICMIntent
-    print "ICM Method: ", objItem.ICMMethod
-    print "Log Pixels: ", objItem.LogPixels
-    print "Pels Height: ", objItem.PelsHeight
-    print "Pels Width: ", objItem.PelsWidth
-    print "Setting ID: ", objItem.SettingID
-    print "Specification Version: ", objItem.SpecificationVersion
Index: ../List DCOM Applications.txt
===================================================================
--- ../List DCOM Applications.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List DCOM Applications.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : COM and DCOM
-### Category3 : 
-### Description : Returns information about all the DCOM (distributed COM) applications installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DCOMApplication")
-for objItem in colItems:
-    print "App ID: ", objItem.AppID
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
Index: ../List Desktop Monitor Properties.txt
===================================================================
--- ../List Desktop Monitor Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Desktop Monitor Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,49 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Video and Display
-### Category3 : 
-### Description : Returns information about the desktop monitor connected to a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DesktopMonitor")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Bandwidth: ", objItem.Bandwidth
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Display Type: ", objItem.DisplayType
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Is Locked: ", objItem.IsLocked
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Monitor Manufacturer: ", objItem.MonitorManufacturer
-    print "Monitor Type: ", objItem.MonitorType
-    print "Name: ", objItem.Name
-    print "Pixels Per X Logical Inch: ", objItem.PixelsPerXLogicalInch
-    print "Pixels Per Y Logical Inch: ", objItem.PixelsPerYLogicalInch
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Screen Height: ", objItem.ScreenHeight
-    print "Screen Width: ", objItem.ScreenWidth
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Desktop Settings.txt
===================================================================
--- ../List Desktop Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Desktop Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,37 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Windows and Explorer Settings
-### Category3 : 
-### Description : Lists the current desktop settings on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Desktop")
-for objItem in colItems:
-    print "Border Width: ", objItem.BorderWidth
-    print "Caption: ", objItem.Caption
-    print "Cool Switch: ", objItem.CoolSwitch
-    print "Cursor Blink Rate: ", objItem.CursorBlinkRate
-    print "Description: ", objItem.Description
-    print "Drag Full Windows: ", objItem.DragFullWindows
-    print "Grid Granularity: ", objItem.GridGranularity
-    print "Icon Spacing: ", objItem.IconSpacing
-    print "Icon Title Face Name: ", objItem.IconTitleFaceName
-    print "Icon Title Size: ", objItem.IconTitleSize
-    print "Icon Title Wrap: ", objItem.IconTitleWrap
-    print "Name: ", objItem.Name
-    print "Pattern: ", objItem.Pattern
-    print "ScreenSaver Active: ", objItem.ScreenSaverActive
-    print "ScreenSaver Executable: ", objItem.ScreenSaverExecutable
-    print "ScreenSaver Secure: ", objItem.ScreenSaverSecure
-    print "ScreenSaver Timeout: ", objItem.ScreenSaverTimeout
-    print "Setting ID: ", objItem.SettingID
-    print "Wallpaper: ", objItem.Wallpaper
-    print "Wallpaper Stretched: ", objItem.WallpaperStretched
-    print "Wallpaper Tiled: ", objItem.WallpaperTiled
Index: ../List Device Memory Addresses.txt
===================================================================
--- ../List Device Memory Addresses.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Device Memory Addresses.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,27 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Memory
-### Category3 : 
-### Description : Returns starting and ending memory addresses for all devices installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DeviceMemoryAddress")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Ending Address: ", objItem.EndingAddress
-    print "Install Date: ", objItem.InstallDate
-    print "Memory Type: ", objItem.MemoryType
-    print "Name: ", objItem.Name
-    print "Starting Address: ", objItem.StartingAddress
-    print "Status: ", objItem.Status
Index: ../List Disk Partition Properties.txt
===================================================================
--- ../List Disk Partition Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Disk Partition Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,55 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Lists the properties of all the disk partitions on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DiskPartition")
-for objItem in colItems:
-    print "Access: ", objItem.Access
-    print "Availability: ", objItem.Availability
-    print "Block Size: ", objItem.BlockSize
-    print "Bootable: ", objItem.Bootable
-    print "Boot Partition: ", objItem.BootPartition
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Disk Index: ", objItem.DiskIndex
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Hidden Sectors: ", objItem.HiddenSectors
-    print "Index: ", objItem.Index
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "Number Of Blocks: ", objItem.NumberOfBlocks
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Primary Partition: ", objItem.PrimaryPartition
-    print "Purpose: ", objItem.Purpose
-    print "Rewrite Partition: ", objItem.RewritePartition
-    print "Size: ", objItem.Size
-    print "Starting Offset: ", objItem.StartingOffset
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Type: ", objItem.Type
Index: ../List Disk Quota Entries.txt
===================================================================
--- ../List Disk Quota Entries.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Disk Quota Entries.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Quotas
-### Category3 : 
-### Description : Enumerates disk quota information (including user name, warning and quota limits, and disk space used) for each disk quota entry on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DiskQuota")
-for objItem in colItems:
-    print "Disk Space Used: ", objItem.DiskSpaceUsed
-    print "Limit: ", objItem.Limit
-    print "Quota Volume: ", objItem.QuotaVolume
-    print "Status: ", objItem.Status
-    print "User: ", objItem.User
-    print "Warning Limit: ", objItem.WarningLimit
Index: ../List Disk Quota Settings.txt
===================================================================
--- ../List Disk Quota Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Disk Quota Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Quotas
-### Category3 : 
-### Description : Enumerates the disk quota settings for each drive on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_QuotaSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Default Limit: ", objItem.DefaultLimit
-    print "Default Warning Limit: ", objItem.DefaultWarningLimit
-    print "Description: ", objItem.Description
-    print "Exceeded Notification: ", objItem.ExceededNotification
-    print "Setting ID: ", objItem.SettingID
-    print "State: ", objItem.State
-    print "Volume Path: ", objItem.VolumePath
-    print "Warning Exceeded Notification: ", objItem.WarningExceededNotification
Index: ../List Display Controller Configuration Settings.txt
===================================================================
--- ../List Display Controller Configuration Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Display Controller Configuration Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,30 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Video and Display
-### Category3 : 
-### Description : Returns information about the video adapters installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DisplayControllerConfiguration")
-for objItem in colItems:
-    print "Bits Per Pixel: ", objItem.BitsPerPixel
-    print "Caption: ", objItem.Caption
-    print "Color Planes: ", objItem.ColorPlanes
-    print "Description: ", objItem.Description
-    print "Device Entries In A Color Table: ", objItem.DeviceEntriesInAColorTable
-    print "Device Specific Pens: ", objItem.DeviceSpecificPens
-    print "Horizontal Resolution: ", objItem.HorizontalResolution
-    print "Name: ", objItem.Name
-    print "Refresh Rate: ", objItem.RefreshRate
-    print "Reserved System Palette Entries: ", objItem.ReservedSystemPaletteEntries
-    print "Setting ID: ", objItem.SettingID
-    print "System Palette Entries: ", objItem.SystemPaletteEntries
-    print "Vertical Resolution: ", objItem.VerticalResolution
-    print "Video Mode: ", objItem.VideoMode
Index: ../List DMA Channel Information.txt
===================================================================
--- ../List DMA Channel Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List DMA Channel Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,40 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Memory
-### Category3 : 
-### Description : Returns information about the configuration of DMA channels on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DMAChannel")
-for objItem in colItems:
-    print "Address Size: ", objItem.AddressSize
-    print "Availability: ", objItem.Availability
-    print "Burst Mode: ", objItem.BurstMode
-    print "Byte Mode: ", objItem.ByteMode
-    print "Caption: ", objItem.Caption
-    print "Channel Timing: ", objItem.ChannelTiming
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "DMA Channel: ", objItem.DMAChannel
-    print "Install Date: ", objItem.InstallDate
-    print "Max Transfer Size: ", objItem.MaxTransferSize
-    print "Name: ", objItem.Name
-    print "Port: ", objItem.Port
-    print "Status: ", objItem.Status
-    z = objItem.TransferWidths
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Transfer Widths: ", x
-    print "Type C Timing: ", objItem.TypeCTiming
-    print "Word Mode: ", objItem.WordMode
Index: ../List Domain Information.txt
===================================================================
--- ../List Domain Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Domain Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,48 +0,0 @@
-###
-###
-###
-### Category1 : Active Directory
-### Category2 : Domains
-### Category3 : 
-### Description : Returns information about the current Active Directory domain.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NTDomain")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Client Site Name: ", objItem.ClientSiteName
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Dc Site Name: ", objItem.DcSiteName
-    print "Description: ", objItem.Description
-    print "Dns Forest Name: ", objItem.DnsForestName
-    print "Domain Controller Address: ", objItem.DomainControllerAddress
-    print "Domain Controller Address Type: ", objItem.DomainControllerAddressType
-    print "Domain Controller Name: ", objItem.DomainControllerName
-    print "Domain Guid: ", objItem.DomainGuid
-    print "Domain Name: ", objItem.DomainName
-    print "DS Directory Service Flag: ", objItem.DSDirectoryServiceFlag
-    print "DS Dns Controller Flag: ", objItem.DSDnsControllerFlag
-    print "DS Dns Domain Flag: ", objItem.DSDnsDomainFlag
-    print "DS Dns Forest Flag: ", objItem.DSDnsForestFlag
-    print "DS Global Catalog Flag: ", objItem.DSGlobalCatalogFlag
-    print "DS Kerberos Distribution Center Flag: ", objItem.DSKerberosDistributionCenterFlag
-    print "DS Primary Domain Controller Flag: ", objItem.DSPrimaryDomainControllerFlag
-    print "DS Time Service Flag: ", objItem.DSTimeServiceFlag
-    print "DS Writable Flag: ", objItem.DSWritableFlag
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Name Format: ", objItem.NameFormat
-    print "Primary Owner Contact: ", objItem.PrimaryOwnerContact
-    print "Primary Owner Name: ", objItem.PrimaryOwnerName
-    z = objItem.Roles
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Roles: ", x
-    print "Status: ", objItem.Status
Index: ../List Environment Variables on a Computer.txt
===================================================================
--- ../List Environment Variables on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Environment Variables on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,24 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Windows and Explorer Settings
-### Category3 : 
-### Description : Uses WMI to return information about all the environment variables on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Environment")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
-    print "System Variable: ", objItem.SystemVariable
-    print "User Name: ", objItem.UserName
-    print "Variable Value: ", objItem.VariableValue
Index: ../List Event Log Properties.txt
===================================================================
--- ../List Event Log Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Event Log Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,60 +0,0 @@
-###
-###
-###
-### Category1 : Logs
-### Category2 : Event Logs
-### Category3 : 
-### Description : Retrieves a list of properties for all the event logs on a computer, except the Security event log.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NTEventlogFile")
-for objItem in colItems:
-    print "Access Mask: ", objItem.AccessMask
-    print "Archive: ", objItem.Archive
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Creation Date: ", objItem.CreationDate
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Drive: ", objItem.Drive
-    print "Eight Dot Three File Name: ", objItem.EightDotThreeFileName
-    print "Encrypted: ", objItem.Encrypted
-    print "Encryption Method: ", objItem.EncryptionMethod
-    print "Extension: ", objItem.Extension
-    print "File Name: ", objItem.FileName
-    print "File Size: ", objItem.FileSize
-    print "File Type: ", objItem.FileType
-    print "FS Creation Class Name: ", objItem.FSCreationClassName
-    print "FS Name: ", objItem.FSName
-    print "Hidden: ", objItem.Hidden
-    print "Install Date: ", objItem.InstallDate
-    print "In Use Count: ", objItem.InUseCount
-    print "Last Accessed: ", objItem.LastAccessed
-    print "Last Modified: ", objItem.LastModified
-    print "Logfile Name: ", objItem.LogfileName
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max File Size: ", objItem.MaxFileSize
-    print "Name: ", objItem.Name
-    print "Number Of Records: ", objItem.NumberOfRecords
-    print "Overwrite OutDated: ", objItem.OverwriteOutDated
-    print "OverWrite Policy: ", objItem.OverWritePolicy
-    print "Path: ", objItem.Path
-    print "Readable: ", objItem.Readable
-    z = objItem.Sources
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Sources: ", x
-    print "Status: ", objItem.Status
-    print "System: ", objItem.System
-    print "Version: ", objItem.Version
-    print "Writeable: ", objItem.Writeable
Index: ../List Events from the Event Logs.txt
===================================================================
--- ../List Events from the Event Logs.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Events from the Event Logs.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,42 +0,0 @@
-###
-###
-###
-### Category1 : Logs
-### Category2 : Event Logs
-### Category3 : 
-### Description : Retrieves events from the Application and System event logs.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NTLogEvent")
-for objItem in colItems:
-    print "Category: ", objItem.Category
-    print "Category String: ", objItem.CategoryString
-    print "Computer Name: ", objItem.ComputerName
-    z = objItem.Data
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Data: ", x
-    print "Event Code: ", objItem.EventCode
-    print "Event Identifier: ", objItem.EventIdentifier
-    print "Event Type: ", objItem.EventType
-    z = objItem.InsertionStrings
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Insertion Strings: ", x
-    print "Logfile: ", objItem.Logfile
-    print "Message: ", objItem.Message
-    print "Record Number: ", objItem.RecordNumber
-    print "Source Name: ", objItem.SourceName
-    print "Time Generated: ", objItem.TimeGenerated
-    print "Time Written: ", objItem.TimeWritten
-    print "Type: ", objItem.Type
-    print "User: ", objItem.User
Index: ../List Floppy Controller Information.txt
===================================================================
--- ../List Floppy Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Floppy Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Controllers and Hubs
-### Description : Retrieves information about all the floppy drive controllers found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_FloppyController")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Floppy Drive Information.txt
===================================================================
--- ../List Floppy Drive Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Floppy Drive Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,61 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Returns information about all the floppy disk drives installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_FloppyDrive")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Default Block Size: ", objItem.DefaultBlockSize
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Block Size: ", objItem.MaxBlockSize
-    print "Max Media Size: ", objItem.MaxMediaSize
-    print "Min Block Size: ", objItem.MinBlockSize
-    print "Name: ", objItem.Name
-    print "Needs Cleaning: ", objItem.NeedsCleaning
-    print "Number Of Media Supported: ", objItem.NumberOfMediaSupported
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Group Information.txt
===================================================================
--- ../List Group Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Group Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Other Directory Services
-### Category2 : Local Computer and NT 4 Accounts
-### Category3 : Groups
-### Description : Returns information about the groups found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Group")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Domain: ", objItem.Domain
-    print "Install Date: ", objItem.InstallDate
-    print "Local Account: ", objItem.LocalAccount
-    print "Name: ", objItem.Name
-    print "SID: ", objItem.SID
-    print "SID Type: ", objItem.SIDType
-    print "Status: ", objItem.Status
Index: ../List IDE Controller Information.txt
===================================================================
--- ../List IDE Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List IDE Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Controllers and Hubs
-### Description : Retrieves information about all IDE controllers found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_IDEController")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Information About the Binary Files Used by an Application.txt
===================================================================
--- ../List Information About the Binary Files Used by an Application.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Information About the Binary Files Used by an Application.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Applications
-### Category2 : User
-### Category3 : 
-### Description : Returns the name and product code of binary information (such as bitmaps, icons, executable files, and so on) used by a Windows Installer application.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Binary")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Data: ", objItem.Data
-    print "Description: ", objItem.Description
-    print "Name: ", objItem.Name
-    print "Product Code: ", objItem.ProductCode
-    print "Setting ID: ", objItem.SettingID
Index: ../List Information about the Threads Active on a Computer.txt
===================================================================
--- ../List Information about the Threads Active on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Information about the Threads Active on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,38 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Processes
-### Category3 : Processes and Threads
-### Description : Returns a list of threads and thread states for each process running on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Thread")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Elapsed Time: ", objItem.ElapsedTime
-    print "Execution State: ", objItem.ExecutionState
-    print "Handle: ", objItem.Handle
-    print "Install Date: ", objItem.InstallDate
-    print "Kernel Mode Time: ", objItem.KernelModeTime
-    print "Name: ", objItem.Name
-    print "OS Creation Class Name: ", objItem.OSCreationClassName
-    print "OS Name: ", objItem.OSName
-    print "Priority: ", objItem.Priority
-    print "Priority Base: ", objItem.PriorityBase
-    print "Process Creation Class Name: ", objItem.ProcessCreationClassName
-    print "Process Handle: ", objItem.ProcessHandle
-    print "Start Address: ", objItem.StartAddress
-    print "Status: ", objItem.Status
-    print "Thread State: ", objItem.ThreadState
-    print "Thread Wait Reason: ", objItem.ThreadWaitReason
-    print "User Mode Time: ", objItem.UserModeTime
Index: ../List Infrared Device Information.txt
===================================================================
--- ../List Infrared Device Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Infrared Device Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about infrared capabilities found in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_InfraredDevice")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Installed Hot Fixes.txt
===================================================================
--- ../List Installed Hot Fixes.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Installed Hot Fixes.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,27 +0,0 @@
-###
-###
-###
-### Category1 : Service Packs and Hot Fixes
-### Category2 : 
-### Category3 : 
-### Description : Returns a list of all the hot fixes installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_QuickFixEngineering")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Fix Comments: ", objItem.FixComments
-    print "HotFix ID: ", objItem.HotFixID
-    print "Install Date: ", objItem.InstallDate
-    print "Installed By: ", objItem.InstalledBy
-    print "Installed On: ", objItem.InstalledOn
-    print "Name: ", objItem.Name
-    print "Service Pack In Effect: ", objItem.ServicePackInEffect
-    print "Status: ", objItem.Status
Index: ../List Installed Software.txt
===================================================================
--- ../List Installed Software.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Installed Software.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,28 +0,0 @@
-###
-###
-###
-### Category1 : Applications
-### Category2 : User
-### Category3 : 
-### Description : Returns a list of software that was installed on a computer using Windows Installer. This information is then written to a text file.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Product")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Identifying Number: ", objItem.IdentifyingNumber
-    print "Install Date: ", objItem.InstallDate
-    print "Install Date 2: ", objItem.InstallDate2
-    print "Install Location: ", objItem.InstallLocation
-    print "Install State: ", objItem.InstallState
-    print "Name: ", objItem.Name
-    print "Package Cache: ", objItem.PackageCache
-    print "SKU Number: ", objItem.SKUNumber
-    print "Vendor: ", objItem.Vendor
-    print "Version: ", objItem.Version
Index: ../List Installed Software Features.txt
===================================================================
--- ../List Installed Software Features.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Installed Software Features.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,29 +0,0 @@
-###
-###
-###
-### Category1 : Applications
-### Category2 : User
-### Category3 : 
-### Description : Returns a list of features for all the software installed on a computer using Windows Installer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SoftwareFeature")
-for objItem in colItems:
-    print "Accesses: ", objItem.Accesses
-    print "Attributes: ", objItem.Attributes
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Identifying Number: ", objItem.IdentifyingNumber
-    print "Install Date: ", objItem.InstallDate
-    print "Install State: ", objItem.InstallState
-    print "Last Use: ", objItem.LastUse
-    print "Name: ", objItem.Name
-    print "Product Name: ", objItem.ProductName
-    print "Status: ", objItem.Status
-    print "Vendor: ", objItem.Vendor
-    print "Version: ", objItem.Version
Index: ../List IP4 Route Table Information.txt
===================================================================
--- ../List IP4 Route Table Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List IP4 Route Table Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,34 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Returns information about the IP route tables configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_IP4RouteTable")
-for objItem in colItems:
-    print "Age: ", objItem.Age
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Destination: ", objItem.Destination
-    print "Information: ", objItem.Information
-    print "Install Date: ", objItem.InstallDate
-    print "Interface Index: ", objItem.InterfaceIndex
-    print "Mask: ", objItem.Mask
-    print "Metric 1: ", objItem.Metric1
-    print "Metric 2: ", objItem.Metric2
-    print "Metric 3: ", objItem.Metric3
-    print "Metric 4: ", objItem.Metric4
-    print "Metric 5: ", objItem.Metric5
-    print "Name: ", objItem.Name
-    print "Next Hop: ", objItem.NextHop
-    print "Protocol: ", objItem.Protocol
-    print "Status: ", objItem.Status
-    print "Type: ", objItem.Type
Index: ../List IRQ Settings.txt
===================================================================
--- ../List IRQ Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List IRQ Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,31 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about the IRQ settings on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_IRQResource")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Hardware: ", objItem.Hardware
-    print "Install Date: ", objItem.InstallDate
-    print "IRQ Number: ", objItem.IRQNumber
-    print "Name: ", objItem.Name
-    print "Shareable: ", objItem.Shareable
-    print "Status: ", objItem.Status
-    print "Trigger Level: ", objItem.TriggerLevel
-    print "Trigger Type: ", objItem.TriggerType
-    print "Vector: ", objItem.Vector
Index: ../List Keyboard Properties.txt
===================================================================
--- ../List Keyboard Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Keyboard Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Returns information about the keyboard connected to a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Keyboard")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Is Locked: ", objItem.IsLocked
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Layout: ", objItem.Layout
-    print "Name: ", objItem.Name
-    print "Number Of Function Keys: ", objItem.NumberOfFunctionKeys
-    print "Password: ", objItem.Password
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Logical Disk Drive Properties.txt
===================================================================
--- ../List Logical Disk Drive Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Logical Disk Drive Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,61 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Lists the properties for all the logical disk drives on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_LogicalDisk")
-for objItem in colItems:
-    print "Access: ", objItem.Access
-    print "Availability: ", objItem.Availability
-    print "Block Size: ", objItem.BlockSize
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Drive Type: ", objItem.DriveType
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "File System: ", objItem.FileSystem
-    print "Free Space: ", objItem.FreeSpace
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Maximum Component Length: ", objItem.MaximumComponentLength
-    print "Media Type: ", objItem.MediaType
-    print "Name: ", objItem.Name
-    print "Number Of Blocks: ", objItem.NumberOfBlocks
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Provider Name: ", objItem.ProviderName
-    print "Purpose: ", objItem.Purpose
-    print "Quotas Disabled: ", objItem.QuotasDisabled
-    print "Quotas Incomplete: ", objItem.QuotasIncomplete
-    print "Quotas Rebuilding: ", objItem.QuotasRebuilding
-    print "Size: ", objItem.Size
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Supports Disk Quotas: ", objItem.SupportsDiskQuotas
-    print "Supports File-Based Compression: ", objItem.SupportsFileBasedCompression
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Volume Dirty: ", objItem.VolumeDirty
-    print "Volume Name: ", objItem.VolumeName
-    print "Volume Serial Number: ", objItem.VolumeSerialNumber
Index: ../List Logon Session Information.txt
===================================================================
--- ../List Logon Session Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Logon Session Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Logon Sessions
-### Category3 : 
-### Description : Returns information about logon sessions associated with the user currently logged on to a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_LogonSession")
-for objItem in colItems:
-    print "Authentication Package: ", objItem.AuthenticationPackage
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Logon Id: ", objItem.LogonId
-    print "Logon Type: ", objItem.LogonType
-    print "Name: ", objItem.Name
-    print "Start Time: ", objItem.StartTime
-    print "Status: ", objItem.Status
Index: ../List Mapped Network Drives.txt
===================================================================
--- ../List Mapped Network Drives.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Mapped Network Drives.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,59 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Retrieves information about mapped network drives. The information returned is similar to that available through the Win32_LogicalDisk class, which retrieves information about the logical disks found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_MappedLogicalDisk")
-for objItem in colItems:
-    print "Access: ", objItem.Access
-    print "Availability: ", objItem.Availability
-    print "Block Size: ", objItem.BlockSize
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "File System: ", objItem.FileSystem
-    print "Free Space: ", objItem.FreeSpace
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Maximum Component Length: ", objItem.MaximumComponentLength
-    print "Name: ", objItem.Name
-    print "Number Of Blocks: ", objItem.NumberOfBlocks
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Provider Name: ", objItem.ProviderName
-    print "Purpose: ", objItem.Purpose
-    print "Quotas Disabled: ", objItem.QuotasDisabled
-    print "Quotas Incomplete: ", objItem.QuotasIncomplete
-    print "Quotas Rebuilding: ", objItem.QuotasRebuilding
-    print "Session ID: ", objItem.SessionID
-    print "Size: ", objItem.Size
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Supports Disk Quotas: ", objItem.SupportsDiskQuotas
-    print "Supports File-Based Compression: ", objItem.SupportsFileBasedCompression
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Volume Name: ", objItem.VolumeName
-    print "Volume Serial Number: ", objItem.VolumeSerialNumber
Index: ../List Memory Array Information.txt
===================================================================
--- ../List Memory Array Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Memory Array Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,70 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Memory
-### Category3 : 
-### Description : Returns starting and ending addresses for all memory arrays installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_MemoryArray")
-for objItem in colItems:
-    print "Access: ", objItem.Access
-    z = objItem.AdditionalErrorData
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Additional Error Data: ", x
-    print "Availability: ", objItem.Availability
-    print "Block Size: ", objItem.BlockSize
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Correctable Error: ", objItem.CorrectableError
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Ending Address: ", objItem.EndingAddress
-    print "Error Access: ", objItem.ErrorAccess
-    print "Error Address: ", objItem.ErrorAddress
-    print "Error Cleared: ", objItem.ErrorCleared
-    z = objItem.ErrorData
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Error Data: ", x
-    print "Error Data Order: ", objItem.ErrorDataOrder
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Granularity: ", objItem.ErrorGranularity
-    print "Error Info: ", objItem.ErrorInfo
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Error Resolution: ", objItem.ErrorResolution
-    print "Error Time: ", objItem.ErrorTime
-    print "Error Transfer Size: ", objItem.ErrorTransferSize
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "Number Of Blocks: ", objItem.NumberOfBlocks
-    print "Other Error Description: ", objItem.OtherErrorDescription
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "PowerManagementSupported: ", objItem.PowerManagementSupported
-    print "Purpose: ", objItem.Purpose
-    print "Starting Address: ", objItem.StartingAddress
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Level Address: ", objItem.SystemLevelAddress
-    print "System Name: ", objItem.SystemName
Index: ../List Memory Devices.txt
===================================================================
--- ../List Memory Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Memory Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,70 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Memory
-### Category3 : 
-### Description : Returns starting and ending addresses for all memory devices installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_MemoryDevice")
-for objItem in colItems:
-    print "Access: ", objItem.Access
-    z = objItem.AdditionalErrorData
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Additional Error Data: ", x
-    print "Availability: ", objItem.Availability
-    print "Block Size: ", objItem.BlockSize
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Correctable Error: ", objItem.CorrectableError
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Ending Address: ", objItem.EndingAddress
-    print "Error Access: ", objItem.ErrorAccess
-    print "Error Address: ", objItem.ErrorAddress
-    print "Error Cleared: ", objItem.ErrorCleared
-    z = objItem.ErrorData
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Error Data: ", x
-    print "Error Data Order: ", objItem.ErrorDataOrder
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Granularity: ", objItem.ErrorGranularity
-    print "Error Info: ", objItem.ErrorInfo
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Error Resolution: ", objItem.ErrorResolution
-    print "Error Time: ", objItem.ErrorTime
-    print "Error Transfer Size: ", objItem.ErrorTransferSize
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "Number Of Blocks: ", objItem.NumberOfBlocks
-    print "Other Error Description: ", objItem.OtherErrorDescription
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Purpose: ", objItem.Purpose
-    print "Starting Address: ", objItem.StartingAddress
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Level Address: ", objItem.SystemLevelAddress
-    print "System Name: ", objItem.SystemName
Index: ../List Modem Information.txt
===================================================================
--- ../List Modem Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Modem Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,125 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Retrieves information about all the modems installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_POTSModem")
-for objItem in colItems:
-    print "Answer Mode: ", objItem.AnswerMode
-    print "Attached To: ", objItem.AttachedTo
-    print "Availability: ", objItem.Availability
-    print "Blind Off: ", objItem.BlindOff
-    print "Blind On: ", objItem.BlindOn
-    print "Caption: ", objItem.Caption
-    print "Compatibility Flags: ", objItem.CompatibilityFlags
-    print "Compression Info: ", objItem.CompressionInfo
-    print "Compression Off: ", objItem.CompressionOff
-    print "Compression On: ", objItem.CompressionOn
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Configuration Dialog: ", objItem.ConfigurationDialog
-    z = objItem.CountriesSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Countries Supported: ", x
-    print "Country Selected: ", objItem.CountrySelected
-    print "Creation Class Name: ", objItem.CreationClassName
-    z = objItem.CurrentPasswords
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Current Passwords: ", x
-    z = objItem.DCB
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "DCB: ", x
-    z = objItem.Default
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Default: ", x
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Device Loader: ", objItem.DeviceLoader
-    print "Device Type: ", objItem.DeviceType
-    print "Dial Type: ", objItem.DialType
-    print "Driver Date: ", objItem.DriverDate
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Control Forced: ", objItem.ErrorControlForced
-    print "Error Control Info: ", objItem.ErrorControlInfo
-    print "Error Control Off: ", objItem.ErrorControlOff
-    print "Error Control On: ", objItem.ErrorControlOn
-    print "Error Description: ", objItem.ErrorDescription
-    print "Flow Control Hard: ", objItem.FlowControlHard
-    print "Flow Control Off: ", objItem.FlowControlOff
-    print "Flow Control Soft: ", objItem.FlowControlSoft
-    print "Inactivity Scale: ", objItem.InactivityScale
-    print "Inactivity Timeout: ", objItem.InactivityTimeout
-    print "Index: ", objItem.Index
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Max Baud Rate To Phone: ", objItem.MaxBaudRateToPhone
-    print "Max Baud Rate To Serial Port: ", objItem.MaxBaudRateToSerialPort
-    print "Max Number Of Passwords: ", objItem.MaxNumberOfPasswords
-    print "Model: ", objItem.Model
-    print "Modem Inf Path: ", objItem.ModemInfPath
-    print "Modem Inf Section: ", objItem.ModemInfSection
-    print "Modulation Bell: ", objItem.ModulationBell
-    print "Modulation CCITT: ", objItem.ModulationCCITT
-    print "Modulation Scheme: ", objItem.ModulationScheme
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    print "Port SubClass: ", objItem.PortSubClass
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Prefix: ", objItem.Prefix
-    z = objItem.Properties
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Properties: ", x
-    print "Provider Name: ", objItem.ProviderName
-    print "Pulse: ", objItem.Pulse
-    print "Reset: ", objItem.Reset
-    print "Responses KeyName: ", objItem.ResponsesKeyName
-    print "Rings Before Answer: ", objItem.RingsBeforeAnswer
-    print "Speaker Mode Dial: ", objItem.SpeakerModeDial
-    print "Speaker Mode Off: ", objItem.SpeakerModeOff
-    print "Speaker Mode On: ", objItem.SpeakerModeOn
-    print "Speaker ModeSetup: ", objItem.SpeakerModeSetup
-    print "Speaker Volume High: ", objItem.SpeakerVolumeHigh
-    print "Speaker Volume Info: ", objItem.SpeakerVolumeInfo
-    print "Speaker Volume Low: ", objItem.SpeakerVolumeLow
-    print "Speaker Volume Med: ", objItem.SpeakerVolumeMed
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "String Format: ", objItem.StringFormat
-    print "Supports Callback: ", objItem.SupportsCallback
-    print "Supports Synchronous Connect: ", objItem.SupportsSynchronousConnect
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Terminator: ", objItem.Terminator
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
-    print "Tone: ", objItem.Tone
-    print "Voice Switch Feature: ", objItem.VoiceSwitchFeature
Index: ../List Motherboard Device Information.txt
===================================================================
--- ../List Motherboard Device Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Motherboard Device Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Retrieves information about the motherboard device installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_MotherboardDevice")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Primary Bus Type: ", objItem.PrimaryBusType
-    print "Revision Number: ", objItem.RevisionNumber
-    print "Secondary Bus Type: ", objItem.SecondaryBusType
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Network Adapter Configuration Properties.txt
===================================================================
--- ../List Network Adapter Configuration Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Adapter Configuration Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,131 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Lists configuration information for all the network adapters installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NetworkAdapterConfiguration")
-for objItem in colItems:
-    print "Arp Always Source Route: ", objItem.ArpAlwaysSourceRoute
-    print "Arp Use EtherSNAP: ", objItem.ArpUseEtherSNAP
-    print "Caption: ", objItem.Caption
-    print "Database Path: ", objItem.DatabasePath
-    print "Dead GW Detect Enabled: ", objItem.DeadGWDetectEnabled
-    z = objItem.DefaultIPGateway
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Default IP Gateway: ", x
-    print "Default TOS: ", objItem.DefaultTOS
-    print "Default TTL: ", objItem.DefaultTTL
-    print "Description: ", objItem.Description
-    print "DHCP Enabled: ", objItem.DHCPEnabled
-    print "DHCP Lease Expires: ", objItem.DHCPLeaseExpires
-    print "DHCP Lease Obtained: ", objItem.DHCPLeaseObtained
-    print "DHCP Server: ", objItem.DHCPServer
-    print "DNS Domain: ", objItem.DNSDomain
-    z = objItem.DNSDomainSuffixSearchOrder
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "DNS Domain Suffix Search Order: ", x
-    print "DNS Enabled For WINS Resolution: ", objItem.DNSEnabledForWINSResolution
-    print "DNS Host Name: ", objItem.DNSHostName
-    z = objItem.DNSServerSearchOrder
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "DNS Server Search Order: ", x
-    print "Domain DNS Registration Enabled: ", objItem.DomainDNSRegistrationEnabled
-    print "Forward Buffer Memory: ", objItem.ForwardBufferMemory
-    print "Full DNS Registration Enabled: ", objItem.FullDNSRegistrationEnabled
-    z = objItem.GatewayCostMetric
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Gateway Cost Metric: ", x
-    print "IGMP Level: ", objItem.IGMPLevel
-    print "Index: ", objItem.Index
-    z = objItem.IPAddress
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IP Address: ", x
-    print "IP Connection Metric: ", objItem.IPConnectionMetric
-    print "IP Enabled: ", objItem.IPEnabled
-    print "IP Filter Security Enabled: ", objItem.IPFilterSecurityEnabled
-    print "IP Port Security Enabled: ", objItem.IPPortSecurityEnabled
-    z = objItem.IPSecPermitIPProtocols
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IP Sec Permit IP Protocols: ", x
-    z = objItem.IPSecPermitTCPPorts
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IP Sec Permit TCP Ports: ", x
-    z = objItem.IPSecPermitUDPPorts
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IPSec Permit UDP Ports: ", x
-    z = objItem.IPSubnet
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IP Subnet: ", x
-    print "IP Use Zero Broadcast: ", objItem.IPUseZeroBroadcast
-    print "IPX Address: ", objItem.IPXAddress
-    print "IPX Enabled: ", objItem.IPXEnabled
-    z = objItem.IPXFrameType
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IPX Frame Type: ", x
-    print "IPX Media Type: ", objItem.IPXMediaType
-    z = objItem.IPXNetworkNumber
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "IPX Network Number: ", x
-    print "IPX Virtual Net Number: ", objItem.IPXVirtualNetNumber
-    print "Keep Alive Interval: ", objItem.KeepAliveInterval
-    print "Keep Alive Time: ", objItem.KeepAliveTime
-    print "MAC Address: ", objItem.MACAddress
-    print "MTU: ", objItem.MTU
-    print "Num Forward Packets: ", objItem.NumForwardPackets
-    print "PMTUBH Detect Enabled: ", objItem.PMTUBHDetectEnabled
-    print "PMTU Discovery Enabled: ", objItem.PMTUDiscoveryEnabled
-    print "Service Name: ", objItem.ServiceName
-    print "Setting ID: ", objItem.SettingID
-    print "Tcpip Netbios Options: ", objItem.TcpipNetbiosOptions
-    print "Tcp Max Connect Retransmissions: ", objItem.TcpMaxConnectRetransmissions
-    print "Tcp Max Data Retransmissions: ", objItem.TcpMaxDataRetransmissions
-    print "Tcp Num Connections: ", objItem.TcpNumConnections
-    print "Tcp Use RFC1122 Urgent Pointer: ", objItem.TcpUseRFC1122UrgentPointer
-    print "Tcp Window Size: ", objItem.TcpWindowSize
-    print "WINS Enable LMHosts Lookup: ", objItem.WINSEnableLMHostsLookup
-    print "WINS Host Lookup File: ", objItem.WINSHostLookupFile
-    print "WINS Primary Server: ", objItem.WINSPrimaryServer
-    print "WINS Scope ID: ", objItem.WINSScopeID
-    print "WINS Secondary Server: ", objItem.WINSSecondaryServer
Index: ../List Network Adapter Properties.txt
===================================================================
--- ../List Network Adapter Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Adapter Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,62 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Lists property values for all the network adapters installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NetworkAdapter")
-for objItem in colItems:
-    print "Adapter Type: ", objItem.AdapterType
-    print "Adapter Type Id: ", objItem.AdapterTypeId
-    print "AutoSense: ", objItem.AutoSense
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Index: ", objItem.Index
-    print "Install Date: ", objItem.InstallDate
-    print "Installed: ", objItem.Installed
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "MAC Address: ", objItem.MACAddress
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Max Speed: ", objItem.MaxSpeed
-    print "Name: ", objItem.Name
-    print "Net Connection ID: ", objItem.NetConnectionID
-    print "Net Connection Status: ", objItem.NetConnectionStatus
-    z = objItem.NetworkAddresses
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Network Addresses: ", x
-    print "Permanent Address: ", objItem.PermanentAddress
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Product Name: ", objItem.ProductName
-    print "Service Name: ", objItem.ServiceName
-    print "Speed: ", objItem.Speed
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Network Client Information.txt
===================================================================
--- ../List Network Client Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Client Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Returns information about all the network clients installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NetworkClient")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
Index: ../List Network Diagnostic Information.txt
===================================================================
--- ../List Network Diagnostic Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Diagnostic Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Monitoring
-### Category3 : 
-### Description : Returns proxy and NNTP information for a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from NetDiagnostics")
-for objItem in colItems:
-    print "bIE Proxy: ", objItem.bIEProxy
-    print "id: ", objItem.id
-    print "IE Proxy: ", objItem.IEProxy
-    print "IE Proxy Port: ", objItem.IEProxyPort
-    print "News NNTP Port: ", objItem.NewsNNTPPort
-    print "News Server: ", objItem.NewsServer
Index: ../List Network Login Profiles.txt
===================================================================
--- ../List Network Login Profiles.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Login Profiles.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,48 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Returns network login information for all the users of a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NetworkLoginProfile")
-for objItem in colItems:
-    print "Account Expires: ", objItem.AccountExpires
-    print "Authorization Flags: ", objItem.AuthorizationFlags
-    print "Bad Password Count: ", objItem.BadPasswordCount
-    print "Caption: ", objItem.Caption
-    print "Code Page: ", objItem.CodePage
-    print "Comment: ", objItem.Comment
-    print "Country Code: ", objItem.CountryCode
-    print "Description: ", objItem.Description
-    print "Flags: ", objItem.Flags
-    print "Full Name: ", objItem.FullName
-    print "Home Directory: ", objItem.HomeDirectory
-    print "Home Directory Drive: ", objItem.HomeDirectoryDrive
-    print "Last Logoff: ", objItem.LastLogoff
-    print "Last Logon: ", objItem.LastLogon
-    print "Logon Hours: ", objItem.LogonHours
-    print "Logon Server: ", objItem.LogonServer
-    print "Maximum Storage: ", objItem.MaximumStorage
-    print "Name: ", objItem.Name
-    print "Number Of Logons: ", objItem.NumberOfLogons
-    print "Parameters: ", objItem.Parameters
-    print "Password Age: ", objItem.PasswordAge
-    print "Password Expires: ", objItem.PasswordExpires
-    print "Primary GroupId: ", objItem.PrimaryGroupId
-    print "Privileges: ", objItem.Privileges
-    print "Profile: ", objItem.Profile
-    print "Script Path: ", objItem.ScriptPath
-    print "Setting ID: ", objItem.SettingID
-    print "Units Per Week: ", objItem.UnitsPerWeek
-    print "User Comment: ", objItem.UserComment
-    print "User Id: ", objItem.UserId
-    print "User Type: ", objItem.UserType
-    print "Workstations: ", objItem.Workstations
Index: ../List Network Shares.txt
===================================================================
--- ../List Network Shares.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Network Shares.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,26 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Shared Folders
-### Category3 : 
-### Description : Lists all the shared folders on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Share")
-for objItem in colItems:
-    print "Access Mask: ", objItem.AccessMask
-    print "Allow Maximum: ", objItem.AllowMaximum
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Maximum Allowed: ", objItem.MaximumAllowed
-    print "Name: ", objItem.Name
-    print "Path: ", objItem.Path
-    print "Status: ", objItem.Status
-    print "Type: ", objItem.Type
Index: ../List Onboard Devices.txt
===================================================================
--- ../List Onboard Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Onboard Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,36 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about devices built into the motherboard installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_OnBoardDevice")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device Type: ", objItem.DeviceType
-    print "Enabled: ", objItem.Enabled
-    print "Hot Swappable: ", objItem.HotSwappable
-    print "Install Date: ", objItem.InstallDate
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "Powered On: ", objItem.PoweredOn
-    print "Removable: ", objItem.Removable
-    print "Replaceable: ", objItem.Replaceable
-    print "Serial Number: ", objItem.SerialNumber
-    print "SKU: ", objItem.SKU
-    print "Status: ", objItem.Status
-    print "Tag: ", objItem.Tag
-    print "Version: ", objItem.Version
Index: ../List Operating System Properties.txt
===================================================================
--- ../List Operating System Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Operating System Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,73 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Version Information
-### Category3 : 
-### Description : Retrieves information about the operating system installed on a computer, including language, encryption level, and build number.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_OperatingSystem")
-for objItem in colItems:
-    print "Boot Device: ", objItem.BootDevice
-    print "Build Number: ", objItem.BuildNumber
-    print "Build Type: ", objItem.BuildType
-    print "Caption: ", objItem.Caption
-    print "Code Set: ", objItem.CodeSet
-    print "Country Code: ", objItem.CountryCode
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CSD Version: ", objItem.CSDVersion
-    print "CS Name: ", objItem.CSName
-    print "Current Time Zone: ", objItem.CurrentTimeZone
-    print "Debug: ", objItem.Debug
-    print "Description: ", objItem.Description
-    print "Distributed: ", objItem.Distributed
-    print "Encryption Level: ", objItem.EncryptionLevel
-    print "Foreground Application Boost: ", objItem.ForegroundApplicationBoost
-    print "Free Physical Memory: ", objItem.FreePhysicalMemory
-    print "Free Space In Paging Files: ", objItem.FreeSpaceInPagingFiles
-    print "Free Virtual Memory: ", objItem.FreeVirtualMemory
-    print "Install Date: ", objItem.InstallDate
-    print "Large System Cache: ", objItem.LargeSystemCache
-    print "Last BootUp Time: ", objItem.LastBootUpTime
-    print "Local Date Time: ", objItem.LocalDateTime
-    print "Locale: ", objItem.Locale
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Of Processes: ", objItem.MaxNumberOfProcesses
-    print "Max Process Memory Size: ", objItem.MaxProcessMemorySize
-    print "Name: ", objItem.Name
-    print "Number Of Licensed Users: ", objItem.NumberOfLicensedUsers
-    print "Number Of Processes: ", objItem.NumberOfProcesses
-    print "Number Of Users: ", objItem.NumberOfUsers
-    print "Organization: ", objItem.Organization
-    print "OS Language: ", objItem.OSLanguage
-    print "OS Product Suite: ", objItem.OSProductSuite
-    print "OS Type: ", objItem.OSType
-    print "Other Type Description: ", objItem.OtherTypeDescription
-    print "Plus Product ID: ", objItem.PlusProductID
-    print "Plus Version Number: ", objItem.PlusVersionNumber
-    print "Primary: ", objItem.Primary
-    print "Product Type: ", objItem.ProductType
-    print "Quantum Length: ", objItem.QuantumLength
-    print "Quantum Type: ", objItem.QuantumType
-    print "Registered User: ", objItem.RegisteredUser
-    print "Serial Number: ", objItem.SerialNumber
-    print "Service Pack Major Version: ", objItem.ServicePackMajorVersion
-    print "Service Pack Minor Version: ", objItem.ServicePackMinorVersion
-    print "Size Stored In Paging Files: ", objItem.SizeStoredInPagingFiles
-    print "Status: ", objItem.Status
-    print "Suite Mask: ", objItem.SuiteMask
-    print "System Device: ", objItem.SystemDevice
-    print "System Directory: ", objItem.SystemDirectory
-    print "System Drive: ", objItem.SystemDrive
-    print "Total Swap Space Size: ", objItem.TotalSwapSpaceSize
-    print "Total Virtual Memory Size: ", objItem.TotalVirtualMemorySize
-    print "Total Visible Memory Size: ", objItem.TotalVisibleMemorySize
-    print "Version: ", objItem.Version
-    print "Windows Directory: ", objItem.WindowsDirectory
Index: ../List Page File Properties.txt
===================================================================
--- ../List Page File Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Page File Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,52 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Page Files
-### Category3 : 
-### Description : Lists the properties of all the page files on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PageFile")
-for objItem in colItems:
-    print "Access Mask: ", objItem.AccessMask
-    print "Archive: ", objItem.Archive
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Creation Date: ", objItem.CreationDate
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Drive: ", objItem.Drive
-    print "Eight Dot Three File Name: ", objItem.EightDotThreeFileName
-    print "Encrypted: ", objItem.Encrypted
-    print "Encryption Method: ", objItem.EncryptionMethod
-    print "Extension: ", objItem.Extension
-    print "File Name: ", objItem.FileName
-    print "File Size: ", objItem.FileSize
-    print "File Type: ", objItem.FileType
-    print "Free Space: ", objItem.FreeSpace
-    print "FS Creation Class Name: ", objItem.FSCreationClassName
-    print "FS Name: ", objItem.FSName
-    print "Hidden: ", objItem.Hidden
-    print "Initial Size: ", objItem.InitialSize
-    print "Install Date: ", objItem.InstallDate
-    print "In Use Count: ", objItem.InUseCount
-    print "Last Accessed: ", objItem.LastAccessed
-    print "Last Modified: ", objItem.LastModified
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Maximum Size: ", objItem.MaximumSize
-    print "Name: ", objItem.Name
-    print "Path: ", objItem.Path
-    print "Readable: ", objItem.Readable
-    print "Status: ", objItem.Status
-    print "System: ", objItem.System
-    print "Version: ", objItem.Version
-    print "Writeable: ", objItem.Writeable
Index: ../List Page File Settings.txt
===================================================================
--- ../List Page File Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Page File Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Page Files
-### Category3 : 
-### Description : Returns information about the initial and maximum sizes of all the page files on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PageFileSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Initial Size: ", objItem.InitialSize
-    print "Maximum Size: ", objItem.MaximumSize
-    print "Name: ", objItem.Name
-    print "Setting ID: ", objItem.SettingID
Index: ../List Page File Use.txt
===================================================================
--- ../List Page File Use.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Page File Use.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Page Files
-### Category3 : 
-### Description : Retrieves page file usage statistics.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PageFileUsage")
-for objItem in colItems:
-    print "Allocated Base Size: ", objItem.AllocatedBaseSize
-    print "Caption: ", objItem.Caption
-    print "Current Usage: ", objItem.CurrentUsage
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Peak Usage: ", objItem.PeakUsage
-    print "Status: ", objItem.Status
-    print "Temp PageFile: ", objItem.TempPageFile
Index: ../List Parallel Port Properties.txt
===================================================================
--- ../List Parallel Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Parallel Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,57 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about the parallel ports installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ParallelPort")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "DMA Support: ", objItem.DMASupport
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "OS AutoDiscovered: ", objItem.OSAutoDiscovered
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List PCMCIA Controller Information.txt
===================================================================
--- ../List PCMCIA Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List PCMCIA Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about all PCMCIA controllers installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PCMCIAController")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Physical Disk Properties.txt
===================================================================
--- ../List Physical Disk Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Physical Disk Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,80 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Retrieves the properties for all the physical disk drives installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_DiskDrive")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Bytes Per Sector: ", objItem.BytesPerSector
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Default Block Size: ", objItem.DefaultBlockSize
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Index: ", objItem.Index
-    print "Install Date: ", objItem.InstallDate
-    print "Interface Type: ", objItem.InterfaceType
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Block Size: ", objItem.MaxBlockSize
-    print "Max Media Size: ", objItem.MaxMediaSize
-    print "Media Loaded: ", objItem.MediaLoaded
-    print "Media Type: ", objItem.MediaType
-    print "Min Block Size: ", objItem.MinBlockSize
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Needs Cleaning: ", objItem.NeedsCleaning
-    print "Number Of Media Supported: ", objItem.NumberOfMediaSupported
-    print "Partitions: ", objItem.Partitions
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "SCSI Bus: ", objItem.SCSIBus
-    print "SCSI Logical Unit: ", objItem.SCSILogicalUnit
-    print "SCSI Port: ", objItem.SCSIPort
-    print "SCSI Target Id: ", objItem.SCSITargetId
-    print "Sectors Per Track: ", objItem.SectorsPerTrack
-    print "Signature: ", objItem.Signature
-    print "Size: ", objItem.Size
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Total Cylinders: ", objItem.TotalCylinders
-    print "Total Heads: ", objItem.TotalHeads
-    print "Total Sectors: ", objItem.TotalSectors
-    print "Total Tracks: ", objItem.TotalTracks
-    print "Tracks Per Cylinder: ", objItem.TracksPerCylinder
Index: ../List Physical Memory Properties.txt
===================================================================
--- ../List Physical Memory Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Physical Memory Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,46 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Memory
-### Category3 : 
-### Description : Returns information about the physical memory installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PhysicalMemory")
-for objItem in colItems:
-    print "Bank Label: ", objItem.BankLabel
-    print "Capacity: ", objItem.Capacity
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Data Width: ", objItem.DataWidth
-    print "Description: ", objItem.Description
-    print "Device Locator: ", objItem.DeviceLocator
-    print "Form Factor: ", objItem.FormFactor
-    print "Hot Swappable: ", objItem.HotSwappable
-    print "Install Date: ", objItem.InstallDate
-    print "Interleave Data Depth: ", objItem.InterleaveDataDepth
-    print "Interleave Position: ", objItem.InterleavePosition
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Memory Type: ", objItem.MemoryType
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "Position In Row: ", objItem.PositionInRow
-    print "Powered On: ", objItem.PoweredOn
-    print "Removable: ", objItem.Removable
-    print "Replaceable: ", objItem.Replaceable
-    print "Serial Number: ", objItem.SerialNumber
-    print "SKU: ", objItem.SKU
-    print "Speed: ", objItem.Speed
-    print "Status: ", objItem.Status
-    print "Tag: ", objItem.Tag
-    print "Total Width: ", objItem.TotalWidth
-    print "Type Detail: ", objItem.TypeDetail
-    print "Version: ", objItem.Version
Index: ../List Plug and Play Devices.txt
===================================================================
--- ../List Plug and Play Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Plug and Play Devices.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Returns a list of all the Plug and Play devices installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PnPEntity")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Class Guid: ", objItem.ClassGuid
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Service: ", objItem.Service
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Plug and Play Signed Drivers.txt
===================================================================
--- ../List Plug and Play Signed Drivers.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Plug and Play Signed Drivers.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Returns information about the signed plug and play drivers installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PnPSignedDriver")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Class Guid: ", objItem.ClassGuid
-    print "Compat ID: ", objItem.CompatID
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device Class: ", objItem.DeviceClass
-    print "Device ID: ", objItem.DeviceID
-    print "Device Name: ", objItem.DeviceName
-    print "Dev Loader: ", objItem.DevLoader
-    print "Driver Date: ", objItem.DriverDate
-    print "Driver Name: ", objItem.DriverName
-    print "Driver Provider Name: ", objItem.DriverProviderName
-    print "Driver Version: ", objItem.DriverVersion
-    print "Friendly Name: ", objItem.FriendlyName
-    print "HardWare ID: ", objItem.HardWareID
-    print "Inf Name: ", objItem.InfName
-    print "Install Date: ", objItem.InstallDate
-    print "Is Signed: ", objItem.IsSigned
-    print "Location: ", objItem.Location
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "PDO: ", objItem.PDO
-    print "Signer: ", objItem.Signer
-    print "Started: ", objItem.Started
-    print "Start Mode: ", objItem.StartMode
-    print "Status: ", objItem.Status
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Pointing Device Properties.txt
===================================================================
--- ../List Pointing Device Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Pointing Device Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,54 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Returns information about all the pointing devices (including mice and trackballs) installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PointingDevice")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Device Interface: ", objItem.DeviceInterface
-    print "DoubleSpeed Threshold: ", objItem.DoubleSpeedThreshold
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Handedness: ", objItem.Handedness
-    print "Hardware Type: ", objItem.HardwareType
-    print "Inf File Name: ", objItem.InfFileName
-    print "Inf Section: ", objItem.InfSection
-    print "Install Date: ", objItem.InstallDate
-    print "Is Locked: ", objItem.IsLocked
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "Number Of Buttons: ", objItem.NumberOfButtons
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    print "Pointing Type: ", objItem.PointingType
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Quad Speed Threshold: ", objItem.QuadSpeedThreshold
-    print "Resolution: ", objItem.Resolution
-    print "Sample Rate: ", objItem.SampleRate
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Synch: ", objItem.Synch
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Port Connector Properties.txt
===================================================================
--- ../List Port Connector Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Port Connector Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,41 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about port connectors installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PortConnector")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Connector Pinout: ", objItem.ConnectorPinout
-    z = objItem.ConnectorType
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Connector Type: ", x
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "External Reference Designator: ", objItem.ExternalReferenceDesignator
-    print "Install Date: ", objItem.InstallDate
-    print "Internal Reference Designator: ", objItem.InternalReferenceDesignator
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "Port Type: ", objItem.PortType
-    print "Powered On: ", objItem.PoweredOn
-    print "Serial Number: ", objItem.SerialNumber
-    print "SKU: ", objItem.SKU
-    print "Status: ", objItem.Status
-    print "Tag: ", objItem.Tag
-    print "Version: ", objItem.Version
Index: ../List Port Resource Information.txt
===================================================================
--- ../List Port Resource Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Port Resource Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,27 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about all the I/O ports found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PortResource")
-for objItem in colItems:
-    print "Alias: ", objItem.Alias
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Ending Address: ", objItem.EndingAddress
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Starting Address: ", objItem.StartingAddress
-    print "Status: ", objItem.Status
Index: ../List Print Job Information.txt
===================================================================
--- ../List Print Job Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Print Job Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,40 +0,0 @@
-###
-###
-###
-### Category1 : Printing
-### Category2 : Print Servers, Queues, and Print Jobs
-### Category3 : 
-### Description : Returns information for each print job on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PrintJob")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Data Type: ", objItem.DataType
-    print "Description: ", objItem.Description
-    print "Document: ", objItem.Document
-    print "Driver Name: ", objItem.DriverName
-    print "Elapsed Time: ", objItem.ElapsedTime
-    print "Host Print Queue: ", objItem.HostPrintQueue
-    print "Install Date: ", objItem.InstallDate
-    print "Job Id: ", objItem.JobId
-    print "Job Status: ", objItem.JobStatus
-    print "Name: ", objItem.Name
-    print "Notify: ", objItem.Notify
-    print "Owner: ", objItem.Owner
-    print "Pages Printed: ", objItem.PagesPrinted
-    print "Parameters: ", objItem.Parameters
-    print "Print Processor: ", objItem.PrintProcessor
-    print "Priority: ", objItem.Priority
-    print "Size: ", objItem.Size
-    print "Start Time: ", objItem.StartTime
-    print "Status: ", objItem.Status
-    print "Status Mask: ", objItem.StatusMask
-    print "Time Submitted: ", objItem.TimeSubmitted
-    print "Total Pages: ", objItem.TotalPages
-    print "Until Time: ", objItem.UntilTime
Index: ../List Printer Capabilities.txt
===================================================================
--- ../List Printer Capabilities.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Printer Capabilities.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,49 +0,0 @@
-###
-###
-###
-### Category1 : Printing
-### Category2 : Print Servers, Queues, and Print Jobs
-### Category3 : 
-### Description : Lists properties and capabilities for all the printers installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PrinterConfiguration")
-for objItem in colItems:
-    print "Bits Per Pel: ", objItem.BitsPerPel
-    print "Caption: ", objItem.Caption
-    print "Collate: ", objItem.Collate
-    print "Color: ", objItem.Color
-    print "Copies: ", objItem.Copies
-    print "Description: ", objItem.Description
-    print "Device Name: ", objItem.DeviceName
-    print "Display Flags: ", objItem.DisplayFlags
-    print "Display Frequency: ", objItem.DisplayFrequency
-    print "Dither Type: ", objItem.DitherType
-    print "Driver Version: ", objItem.DriverVersion
-    print "Duplex: ", objItem.Duplex
-    print "Form Name: ", objItem.FormName
-    print "Horizontal Resolution: ", objItem.HorizontalResolution
-    print "ICM Intent: ", objItem.ICMIntent
-    print "ICM Method: ", objItem.ICMMethod
-    print "Log Pixels: ", objItem.LogPixels
-    print "Media Type: ", objItem.MediaType
-    print "Name: ", objItem.Name
-    print "Orientation: ", objItem.Orientation
-    print "Paper Length: ", objItem.PaperLength
-    print "Paper Size: ", objItem.PaperSize
-    print "Paper Width: ", objItem.PaperWidth
-    print "Pels Height: ", objItem.PelsHeight
-    print "Pels Width: ", objItem.PelsWidth
-    print "Print Quality: ", objItem.PrintQuality
-    print "Scale: ", objItem.Scale
-    print "Setting ID: ", objItem.SettingID
-    print "Specification Version: ", objItem.SpecificationVersion
-    print "TT Option: ", objItem.TTOption
-    print "Vertical Resolution: ", objItem.VerticalResolution
-    print "X Resolution: ", objItem.XResolution
-    print "Y Resolution: ", objItem.YResolution
Index: ../List Printer Drivers.txt
===================================================================
--- ../List Printer Drivers.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Printer Drivers.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Printing
-### Category2 : Printer Ports and Drivers
-### Category3 : 
-### Description : Lists all the printer drivers that have been installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_PrinterDriver")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Config File: ", objItem.ConfigFile
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Data File: ", objItem.DataFile
-    print "Default Data Type: ", objItem.DefaultDataType
-    z = objItem.DependentFiles
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Dependent Files: ", x
-    print "Description: ", objItem.Description
-    print "Driver Path: ", objItem.DriverPath
-    print "File Path: ", objItem.FilePath
-    print "Help File: ", objItem.HelpFile
-    print "Inf Name: ", objItem.InfName
-    print "Install Date: ", objItem.InstallDate
-    print "Monitor Name: ", objItem.MonitorName
-    print "Name: ", objItem.Name
-    print "OEM Url: ", objItem.OEMUrl
-    print "Started: ", objItem.Started
-    print "Start Mode: ", objItem.StartMode
-    print "Status: ", objItem.Status
-    print "Supported Platform: ", objItem.SupportedPlatform
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Version: ", objItem.Version
Index: ../List Printer Information.txt
===================================================================
--- ../List Printer Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Printer Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,172 +0,0 @@
-###
-###
-###
-### Category1 : Printing
-### Category2 : Print Servers, Queues, and Print Jobs
-### Category3 : 
-### Description : Lists information about all the printers connected to a print server.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Printer")
-for objItem in colItems:
-    print "Attributes: ", objItem.Attributes
-    print "Availability: ", objItem.Availability
-    z = objItem.AvailableJobSheets
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Available Job Sheets: ", x
-    print "Average Pages Per Minute: ", objItem.AveragePagesPerMinute
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    z = objItem.CharSetsSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Char Sets Supported: ", x
-    print "Comment: ", objItem.Comment
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    z = objItem.CurrentCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Current Capabilities: ", x
-    print "Current Char Set: ", objItem.CurrentCharSet
-    print "Current Language: ", objItem.CurrentLanguage
-    print "Current Mime Type: ", objItem.CurrentMimeType
-    print "Current Natural Language: ", objItem.CurrentNaturalLanguage
-    print "Current Paper Type: ", objItem.CurrentPaperType
-    print "Default: ", objItem.Default
-    z = objItem.DefaultCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Default Capabilities: ", x
-    print "Default Copies: ", objItem.DefaultCopies
-    print "Default Language: ", objItem.DefaultLanguage
-    print "Default Mime Type: ", objItem.DefaultMimeType
-    print "Default Number Up: ", objItem.DefaultNumberUp
-    print "Default Paper Type: ", objItem.DefaultPaperType
-    print "Default Priority: ", objItem.DefaultPriority
-    print "Description: ", objItem.Description
-    print "Detected Error State: ", objItem.DetectedErrorState
-    print "Device ID: ", objItem.DeviceID
-    print "Direct: ", objItem.Direct
-    print "Do Complete First: ", objItem.DoCompleteFirst
-    print "Driver Name: ", objItem.DriverName
-    print "Enable BIDI: ", objItem.EnableBIDI
-    print "Enable Dev Query Print: ", objItem.EnableDevQueryPrint
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    z = objItem.ErrorInformation
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Error Information: ", x
-    print "Extended Detected Error State: ", objItem.ExtendedDetectedErrorState
-    print "Extended Printer Status: ", objItem.ExtendedPrinterStatus
-    print "Hidden: ", objItem.Hidden
-    print "Horizontal Resolution: ", objItem.HorizontalResolution
-    print "Install Date: ", objItem.InstallDate
-    print "Job Count Since Last Reset: ", objItem.JobCountSinceLastReset
-    print "Keep Printed Jobs: ", objItem.KeepPrintedJobs
-    z = objItem.LanguagesSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Languages Supported: ", x
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Local: ", objItem.Local
-    print "Location: ", objItem.Location
-    print "Marking Technology: ", objItem.MarkingTechnology
-    print "Max Copies: ", objItem.MaxCopies
-    print "Max Number Up: ", objItem.MaxNumberUp
-    print "Max Size Supported: ", objItem.MaxSizeSupported
-    z = objItem.MimeTypesSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Mime Types Supported: ", x
-    print "Name: ", objItem.Name
-    z = objItem.NaturalLanguagesSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Natural Languages Supported: ", x
-    print "Network: ", objItem.Network
-    z = objItem.PaperSizesSupported
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Paper Sizes Supported: ", x
-    z = objItem.PaperTypesAvailable
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Paper Types Available: ", x
-    print "Parameters: ", objItem.Parameters
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    print "Port Name: ", objItem.PortName
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    z = objItem.PrinterPaperNames
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Printer Paper Names: ", x
-    print "Printer State: ", objItem.PrinterState
-    print "Printer Status: ", objItem.PrinterStatus
-    print "Print Job Data Type: ", objItem.PrintJobDataType
-    print "Print Processor: ", objItem.PrintProcessor
-    print "Priority: ", objItem.Priority
-    print "Published: ", objItem.Published
-    print "Queued: ", objItem.Queued
-    print "Raw Only: ", objItem.RawOnly
-    print "Separator File: ", objItem.SeparatorFile
-    print "Server Name: ", objItem.ServerName
-    print "Shared: ", objItem.Shared
-    print "Share Name: ", objItem.ShareName
-    print "Spool Enabled: ", objItem.SpoolEnabled
-    print "Start Time: ", objItem.StartTime
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
-    print "Until Time: ", objItem.UntilTime
-    print "Vertical Resolution: ", objItem.VerticalResolution
-    print "Work Offline: ", objItem.WorkOffline
Index: ../List Printer Port Properties.txt
===================================================================
--- ../List Printer Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Printer Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,33 +0,0 @@
-###
-###
-###
-### Category1 : Printing
-### Category2 : Printer Ports and Drivers
-### Category3 : 
-### Description : Lists properties of all the TCP/IP printer ports installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TCPIPPrinterPort")
-for objItem in colItems:
-    print "Byte Count: ", objItem.ByteCount
-    print "Caption: ", objItem.Caption
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Host Address: ", objItem.HostAddress
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Port Number: ", objItem.PortNumber
-    print "Protocol: ", objItem.Protocol
-    print "Queue: ", objItem.Queue
-    print "SNMP Community: ", objItem.SNMPCommunity
-    print "SNMP Dev Index: ", objItem.SNMPDevIndex
-    print "SNMP Enabled: ", objItem.SNMPEnabled
-    print "Status: ", objItem.Status
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Type: ", objItem.Type
Index: ../List Processor Information.txt
===================================================================
--- ../List Processor Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Processor Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,65 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Basic Hardware and Firmware
-### Category3 : 
-### Description : Returns information about the processors installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Processor")
-for objItem in colItems:
-    print "Address Width: ", objItem.AddressWidth
-    print "Architecture: ", objItem.Architecture
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Cpu Status: ", objItem.CpuStatus
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Current Clock Speed: ", objItem.CurrentClockSpeed
-    print "Current Voltage: ", objItem.CurrentVoltage
-    print "Data Width: ", objItem.DataWidth
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Ext Clock: ", objItem.ExtClock
-    print "Family: ", objItem.Family
-    print "Install Date: ", objItem.InstallDate
-    print "L2 Cache Size: ", objItem.L2CacheSize
-    print "L2 Cache Speed: ", objItem.L2CacheSpeed
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Level: ", objItem.Level
-    print "Load Percentage: ", objItem.LoadPercentage
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Clock Speed: ", objItem.MaxClockSpeed
-    print "Name: ", objItem.Name
-    print "Other Family Description: ", objItem.OtherFamilyDescription
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Processor Id: ", objItem.ProcessorId
-    print "Processor Type: ", objItem.ProcessorType
-    print "Revision: ", objItem.Revision
-    print "Role: ", objItem.Role
-    print "Socket Designation: ", objItem.SocketDesignation
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Stepping: ", objItem.Stepping
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Unique Id: ", objItem.UniqueId
-    print "Upgrade Method: ", objItem.UpgradeMethod
-    print "Version: ", objItem.Version
-    print "Voltage Caps: ", objItem.VoltageCaps
Index: ../List ProgIDs.txt
===================================================================
--- ../List ProgIDs.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List ProgIDs.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,27 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : COM and DCOM
-### Category3 : 
-### Description : Returns a list of ProgIDs (Programmatic Identifiers) found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ProgIDSpecification")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Check ID: ", objItem.CheckID
-    print "Check Mode: ", objItem.CheckMode
-    print "Description: ", objItem.Description
-    print "Name: ", objItem.Name
-    print "Parent: ", objItem.Parent
-    print "ProgID: ", objItem.ProgID
-    print "Software Element ID: ", objItem.SoftwareElementID
-    print "Software Element State: ", objItem.SoftwareElementState
-    print "Target Operating System: ", objItem.TargetOperatingSystem
-    print "Version: ", objItem.Version
Index: ../List Proxy Server Information.txt
===================================================================
--- ../List Proxy Server Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Proxy Server Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Returns information about the Internet proxy server used by a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Proxy")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Proxy Port Number: ", objItem.ProxyPortNumber
-    print "Proxy Server: ", objItem.ProxyServer
-    print "Server Name: ", objItem.ServerName
-    print "Setting ID: ", objItem.SettingID
Index: ../List Recovery Configuration Options.txt
===================================================================
--- ../List Recovery Configuration Options.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Recovery Configuration Options.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,31 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Startup and Shutdown
-### Category3 : 
-### Description : Returns a list of settings that indicate the action to be taken by a computer should a stop event (blue screen) occur.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_OSRecoveryConfiguration")
-for objItem in colItems:
-    print "Auto Reboot: ", objItem.AutoReboot
-    print "Caption: ", objItem.Caption
-    print "Debug File Path: ", objItem.DebugFilePath
-    print "Debug Info Type: ", objItem.DebugInfoType
-    print "Description: ", objItem.Description
-    print "Expanded Debug File Path: ", objItem.ExpandedDebugFilePath
-    print "Expanded MiniDump Directory: ", objItem.ExpandedMiniDumpDirectory
-    print "Kernel Dump Only: ", objItem.KernelDumpOnly
-    print "MiniDump Directory: ", objItem.MiniDumpDirectory
-    print "Name: ", objItem.Name
-    print "Overwrite Existing Debug File: ", objItem.OverwriteExistingDebugFile
-    print "Send Admin Alert: ", objItem.SendAdminAlert
-    print "Setting ID: ", objItem.SettingID
-    print "Write Debug Info: ", objItem.WriteDebugInfo
-    print "Write To System Log: ", objItem.WriteToSystemLog
Index: ../List Registry Properties.txt
===================================================================
--- ../List Registry Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Registry Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,24 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Registry
-### Category3 : 
-### Description : Returns information about the computer registry.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Registry")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Current Size: ", objItem.CurrentSize
-    print "Description: ", objItem.Description
-    print "Install Date: ", objItem.InstallDate
-    print "Maximum Size: ", objItem.MaximumSize
-    print "Name: ", objItem.Name
-    print "Proposed Size: ", objItem.ProposedSize
-    print "Status: ", objItem.Status
Index: ../List Scheduled Tasks.txt
===================================================================
--- ../List Scheduled Tasks.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Scheduled Tasks.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,35 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Task Scheduling
-### Category3 : 
-### Description : Enumerates all the scheduled tasks on a computer. Note: WMI can only enumerate scheduled tasks created using the Win32_ScheduledJob class or the At.exe utility. It cannot enumerate tasks created using the Task Scheduler.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ScheduledJob")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Command: ", objItem.Command
-    print "Days Of Month: ", objItem.DaysOfMonth
-    print "Days Of Week: ", objItem.DaysOfWeek
-    print "Description: ", objItem.Description
-    print "Elapsed Time: ", objItem.ElapsedTime
-    print "Install Date: ", objItem.InstallDate
-    print "Interact With Desktop: ", objItem.InteractWithDesktop
-    print "Job Id: ", objItem.JobId
-    print "Job Status: ", objItem.JobStatus
-    print "Name: ", objItem.Name
-    print "Notify: ", objItem.Notify
-    print "Owner: ", objItem.Owner
-    print "Priority: ", objItem.Priority
-    print "Run Repeatedly: ", objItem.RunRepeatedly
-    print "Start Time: ", objItem.StartTime
-    print "Status: ", objItem.Status
-    print "Time Submitted: ", objItem.TimeSubmitted
-    print "Until Time: ", objItem.UntilTime
Index: ../List SCSI Controller Information.txt
===================================================================
--- ../List SCSI Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List SCSI Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,52 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Controllers and Hubs
-### Description : Returns information about all the SCSI controllers found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SCSIController")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Controller Timeouts: ", objItem.ControllerTimeouts
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Device Map: ", objItem.DeviceMap
-    print "Driver Name: ", objItem.DriverName
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Hardware Version: ", objItem.HardwareVersion
-    print "Index: ", objItem.Index
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Data Width: ", objItem.MaxDataWidth
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Max Transfer Rate: ", objItem.MaxTransferRate
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protection Management: ", objItem.ProtectionManagement
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Serial Port Configuration Properties.txt
===================================================================
--- ../List Serial Port Configuration Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Serial Port Configuration Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,45 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Enumerates configuration values for all the serial ports installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SerialPortConfiguration")
-for objItem in colItems:
-    print "Abort Read Write On Error: ", objItem.AbortReadWriteOnError
-    print "Baud Rate: ", objItem.BaudRate
-    print "Binary Mode Enabled: ", objItem.BinaryModeEnabled
-    print "Bits Per Byte: ", objItem.BitsPerByte
-    print "Caption: ", objItem.Caption
-    print "Continue XMitOn XOff: ", objItem.ContinueXMitOnXOff
-    print "CTS Outflow Control: ", objItem.CTSOutflowControl
-    print "Description: ", objItem.Description
-    print "Discard NULL Bytes: ", objItem.DiscardNULLBytes
-    print "DSR Outflow Control: ", objItem.DSROutflowControl
-    print "DSR Sensitivity: ", objItem.DSRSensitivity
-    print "DTR Flow Control Type: ", objItem.DTRFlowControlType
-    print "EOF Character: ", objItem.EOFCharacter
-    print "Error Replace Character: ", objItem.ErrorReplaceCharacter
-    print "Error Replacement Enabled: ", objItem.ErrorReplacementEnabled
-    print "Event Character: ", objItem.EventCharacter
-    print "Is Busy: ", objItem.IsBusy
-    print "Name: ", objItem.Name
-    print "Parity: ", objItem.Parity
-    print "Parity Check Enabled: ", objItem.ParityCheckEnabled
-    print "RTS Flow Control Type: ", objItem.RTSFlowControlType
-    print "Setting ID: ", objItem.SettingID
-    print "Stop Bits: ", objItem.StopBits
-    print "XOff Character: ", objItem.XOffCharacter
-    print "XOff XMit Threshold: ", objItem.XOffXMitThreshold
-    print "XOn Character: ", objItem.XOnCharacter
-    print "XOn XMit Threshold: ", objItem.XOnXMitThreshold
-    print "XOn XOff InFlow Control: ", objItem.XOnXOffInFlowControl
-    print "XOn XOff OutFlow Control: ", objItem.XOnXOffOutFlowControl
Index: ../List Serial Port Properties.txt
===================================================================
--- ../List Serial Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Serial Port Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,78 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about the serial ports installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SerialPort")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Binary: ", objItem.Binary
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Max Baud Rate: ", objItem.MaxBaudRate
-    print "Maximum Input Buffer Size: ", objItem.MaximumInputBufferSize
-    print "Maximum Output Buffer Size: ", objItem.MaximumOutputBufferSize
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "OS AutoDiscovered: ", objItem.OSAutoDiscovered
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Provider Type: ", objItem.ProviderType
-    print "Settable Baud Rate: ", objItem.SettableBaudRate
-    print "Settable Data Bits: ", objItem.SettableDataBits
-    print "Settable Flow Control: ", objItem.SettableFlowControl
-    print "Settable Parity: ", objItem.SettableParity
-    print "Settable Parity Check: ", objItem.SettableParityCheck
-    print "Settable RLSD: ", objItem.SettableRLSD
-    print "Settable Stop Bits: ", objItem.SettableStopBits
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Supports 16-Bit Mode: ", objItem.Supports16BitMode
-    print "Supports DTRDSR: ", objItem.SupportsDTRDSR
-    print "Supports Elapsed Timeouts: ", objItem.SupportsElapsedTimeouts
-    print "Supports Int Timeouts: ", objItem.SupportsIntTimeouts
-    print "Supports Parity Check: ", objItem.SupportsParityCheck
-    print "Supports RLSD: ", objItem.SupportsRLSD
-    print "Supports RTSCTS: ", objItem.SupportsRTSCTS
-    print "Supports Special Characters: ", objItem.SupportsSpecialCharacters
-    print "Supports XOn XOff: ", objItem.SupportsXOnXOff
-    print "Supports XOn XOffSet: ", objItem.SupportsXOnXOffSet
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List Service Load Order Groups.txt
===================================================================
--- ../List Service Load Order Groups.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Service Load Order Groups.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Services
-### Category3 : 
-### Description : Returns a list of all the service load order groups found on a computer, and well as their load order.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_LoadOrderGroup")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Driver Enabled: ", objItem.DriverEnabled
-    print "Group Order: ", objItem.GroupOrder
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
Index: ../List Service Properties.txt
===================================================================
--- ../List Service Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Service Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,41 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Services
-### Category3 : 
-### Description : Retrieves a complete list of services and their associated properties. Information is saved to a text file: C:\Scripts\Service_List.cs.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Service")
-for objItem in colItems:
-    print "Accept Pause: ", objItem.AcceptPause
-    print "Accept Stop: ", objItem.AcceptStop
-    print "Caption: ", objItem.Caption
-    print "CheckPoint: ", objItem.CheckPoint
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Desktop Interact: ", objItem.DesktopInteract
-    print "Display Name: ", objItem.DisplayName
-    print "Error Control: ", objItem.ErrorControl
-    print "Exit Code: ", objItem.ExitCode
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Path Name: ", objItem.PathName
-    print "Process Id: ", objItem.ProcessId
-    print "Service Specific Exit Code: ", objItem.ServiceSpecificExitCode
-    print "Service Type: ", objItem.ServiceType
-    print "Started: ", objItem.Started
-    print "Start Mode: ", objItem.StartMode
-    print "Start Name: ", objItem.StartName
-    print "State: ", objItem.State
-    print "Status: ", objItem.Status
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Tag Id: ", objItem.TagId
-    print "Wait Hint: ", objItem.WaitHint
Index: ../List Shortcuts on a Computer.txt
===================================================================
--- ../List Shortcuts on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Shortcuts on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,50 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Windows and Explorer Settings
-### Category3 : 
-### Description : Uses WMI to return a list of all the shortcuts on a computer, as well as such properties as the file name, creation date, and target for each shortcut.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ShortcutFile")
-for objItem in colItems:
-    print "AccessMask: ", objItem.AccessMask
-    print "Archive: ", objItem.Archive
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Creation Date: ", objItem.CreationDate
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Drive: ", objItem.Drive
-    print "Eight Dot Three File Name: ", objItem.EightDotThreeFileName
-    print "Encrypted: ", objItem.Encrypted
-    print "Encryption Method: ", objItem.EncryptionMethod
-    print "Extension: ", objItem.Extension
-    print "File Name: ", objItem.FileName
-    print "File Size: ", objItem.FileSize
-    print "File Type: ", objItem.FileType
-    print "FS Creation Class Name: ", objItem.FSCreationClassName
-    print "FS Name: ", objItem.FSName
-    print "Hidden: ", objItem.Hidden
-    print "Install Date: ", objItem.InstallDate
-    print "In Use Count: ", objItem.InUseCount
-    print "Last Accessed: ", objItem.LastAccessed
-    print "Last Modified: ", objItem.LastModified
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "Path: ", objItem.Path
-    print "Readable: ", objItem.Readable
-    print "Status: ", objItem.Status
-    print "System: ", objItem.System
-    print "Target: ", objItem.Target
-    print "Version: ", objItem.Version
-    print "Writeable: ", objItem.Writeable
Index: ../List Sound Card Properties.txt
===================================================================
--- ../List Sound Card Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Sound Card Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,43 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Peripherals and Devices
-### Category3 : 
-### Description : Retrieves information about all the sound cards installed in a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SoundDevice")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "DMA Buffer Size: ", objItem.DMABufferSize
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "MPU401 Address: ", objItem.MPU401Address
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Product Name: ", objItem.ProductName
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Start Menu Program Groups.txt
===================================================================
--- ../List Start Menu Program Groups.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Start Menu Program Groups.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Windows and Explorer Settings
-### Category3 : 
-### Description : Retrieves information about all the Start menu program groups currently in use on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_ProgramGroup")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Group Name: ", objItem.GroupName
-    print "Name: ", objItem.Name
-    print "Setting ID: ", objItem.SettingID
-    print "User Name: ", objItem.UserName
Index: ../List System Slot Properties.txt
===================================================================
--- ../List System Slot Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List System Slot Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,62 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Ports and Slots
-### Category3 : 
-### Description : Returns information about the system slots installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_SystemSlot")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Connector Pinout: ", objItem.ConnectorPinout
-    z = objItem.ConnectorType
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Connector Type: ", x
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Current Usage: ", objItem.CurrentUsage
-    print "Description: ", objItem.Description
-    print "Height Allowed: ", objItem.HeightAllowed
-    print "Install Date: ", objItem.InstallDate
-    print "Length Allowed: ", objItem.LengthAllowed
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Data Width: ", objItem.MaxDataWidth
-    print "Model: ", objItem.Model
-    print "Name: ", objItem.Name
-    print "Number: ", objItem.Number
-    print "Other Identifying Info: ", objItem.OtherIdentifyingInfo
-    print "Part Number: ", objItem.PartNumber
-    print "PME Signal: ", objItem.PMESignal
-    print "Powered On: ", objItem.PoweredOn
-    print "Purpose Description: ", objItem.PurposeDescription
-    print "Serial Number: ", objItem.SerialNumber
-    print "Shared: ", objItem.Shared
-    print "SKU: ", objItem.SKU
-    print "Slot Designation: ", objItem.SlotDesignation
-    print "Special Purpose: ", objItem.SpecialPurpose
-    print "Status: ", objItem.Status
-    print "Supports Hot Plug: ", objItem.SupportsHotPlug
-    print "Tag: ", objItem.Tag
-    print "Thermal Rating: ", objItem.ThermalRating
-    z = objItem.VccMixedVoltageSupport
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Vcc Mixed Voltage Support: ", x
-    print "Version: ", objItem.Version
-    z = objItem.VppMixedVoltageSupport
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Vpp Mixed Voltage Support: ", x
Index: ../List Tape Drive Information.txt
===================================================================
--- ../List Tape Drive Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Tape Drive Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,71 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Physical and Logical Disks
-### Description : Lists information about all the tape drives installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TapeDrive")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    z = objItem.Capabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capabilities: ", x
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Compression: ", objItem.Compression
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Default Block Size: ", objItem.DefaultBlockSize
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "ECC: ", objItem.ECC
-    print "EOT Warning Zone Size: ", objItem.EOTWarningZoneSize
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Error Methodology: ", objItem.ErrorMethodology
-    print "Features High: ", objItem.FeaturesHigh
-    print "Features Low: ", objItem.FeaturesLow
-    print "Id: ", objItem.Id
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Block Size: ", objItem.MaxBlockSize
-    print "Max Media Size: ", objItem.MaxMediaSize
-    print "Max Partition Count: ", objItem.MaxPartitionCount
-    print "Media Type: ", objItem.MediaType
-    print "Min Block Size: ", objItem.MinBlockSize
-    print "Name: ", objItem.Name
-    print "Needs Cleaning: ", objItem.NeedsCleaning
-    print "Number Of Media Supported: ", objItem.NumberOfMediaSupported
-    print "Padding: ", objItem.Padding
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Report Set Marks: ", objItem.ReportSetMarks
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
Index: ../List Terminal Service Service Properties.txt
===================================================================
--- ../List Terminal Service Service Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Service Service Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,46 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about the Terminal Service service.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TerminalService")
-for objItem in colItems:
-    print "Accept Pause: ", objItem.AcceptPause
-    print "Accept Stop: ", objItem.AcceptStop
-    print "Caption: ", objItem.Caption
-    print "CheckPoint: ", objItem.CheckPoint
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Desktop Interact: ", objItem.DesktopInteract
-    print "Disconnected Sessions: ", objItem.DisconnectedSessions
-    print "Display Name: ", objItem.DisplayName
-    print "Error Control: ", objItem.ErrorControl
-    print "Estimated Session Capacity: ", objItem.EstimatedSessionCapacity
-    print "Exit Code: ", objItem.ExitCode
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Path Name: ", objItem.PathName
-    print "Process Id: ", objItem.ProcessId
-    print "Raw Session Capacity: ", objItem.RawSessionCapacity
-    print "Resource Constraint: ", objItem.ResourceConstraint
-    print "Service Specific Exit Code: ", objItem.ServiceSpecificExitCode
-    print "Service Type: ", objItem.ServiceType
-    print "Started: ", objItem.Started
-    print "Start Mode: ", objItem.StartMode
-    print "Start Name: ", objItem.StartName
-    print "State: ", objItem.State
-    print "Status: ", objItem.Status
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Tag Id: ", objItem.TagId
-    print "Total Sessions: ", objItem.TotalSessions
-    print "Wait Hint: ", objItem.WaitHint
Index: ../List Terminal Services Accounts.txt
===================================================================
--- ../List Terminal Services Accounts.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Accounts.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,26 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about all the Terminal Services accounts on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSAccount")
-for objItem in colItems:
-    print "Account Name: ", objItem.AccountName
-    print "Audit Fail: ", objItem.AuditFail
-    print "Audit Success: ", objItem.AuditSuccess
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Permissions Allowed: ", objItem.PermissionsAllowed
-    print "Permissions Denied: ", objItem.PermissionsDenied
-    print "Setting ID: ", objItem.SettingID
-    print "SID: ", objItem.SID
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List Terminal Services Client Settings.txt
===================================================================
--- ../List Terminal Services Client Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Client Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,32 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about the Terminal Service client settings and policies configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSClientSetting")
-for objItem in colItems:
-    print "Audio Mapping: ", objItem.AudioMapping
-    print "Caption: ", objItem.Caption
-    print "Clipboard Mapping: ", objItem.ClipboardMapping
-    print "Color Depth: ", objItem.ColorDepth
-    print "Color Depth Policy: ", objItem.ColorDepthPolicy
-    print "COM Port Mapping: ", objItem.COMPortMapping
-    print "Connect Client Drives At Logon: ", objItem.ConnectClientDrivesAtLogon
-    print "Connection Policy: ", objItem.ConnectionPolicy
-    print "Connect Printer At Logon: ", objItem.ConnectPrinterAtLogon
-    print "Default To Client Printer: ", objItem.DefaultToClientPrinter
-    print "Description: ", objItem.Description
-    print "Drive Mapping: ", objItem.DriveMapping
-    print "LPT Port Mapping: ", objItem.LPTPortMapping
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
-    print "Windows Printer Mapping: ", objItem.WindowsPrinterMapping
Index: ../List Terminal Services Environment Settings.txt
===================================================================
--- ../List Terminal Services Environment Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Environment Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,24 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about the Terminal Service client environment settings configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSEnvironmentSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Client WallPaper: ", objItem.ClientWallPaper
-    print "Description: ", objItem.Description
-    print "Initial Program Path: ", objItem.InitialProgramPath
-    print "Initial Program Policy: ", objItem.InitialProgramPolicy
-    print "Setting ID: ", objItem.SettingID
-    print "Start in: ", objItem.Startin
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List Terminal Services General Settings.txt
===================================================================
--- ../List Terminal Services General Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services General Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns general information about how Terminal Services has been configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSGeneralSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Comment: ", objItem.Comment
-    print "Description: ", objItem.Description
-    print "Min Encryption Level: ", objItem.MinEncryptionLevel
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
-    print "Terminal Protocol: ", objItem.TerminalProtocol
-    print "Transport: ", objItem.Transport
-    print "Windows Authentication: ", objItem.WindowsAuthentication
Index: ../List Terminal Services Logon Settings.txt
===================================================================
--- ../List Terminal Services Logon Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Logon Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about the Terminal Service logon policies configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSLogonSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Client Logon Info Policy: ", objItem.ClientLogonInfoPolicy
-    print "Description: ", objItem.Description
-    print "Domain: ", objItem.Domain
-    print "Password: ", objItem.Password
-    print "Prompt For Password: ", objItem.PromptForPassword
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
-    print "Use rName: ", objItem.UserName
Index: ../List Terminal Services Network Adapter List Settings.txt
===================================================================
--- ../List Terminal Services Network Adapter List Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Network Adapter List Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Lists the network adapters that can be configured for Terminal Services.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSNetworkAdapterListSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Network Adapter ID: ", objItem.NetworkAdapterID
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
-    print "Terminal Protocol: ", objItem.TerminalProtocol
-    print "Transport: ", objItem.Transport
Index: ../List Terminal Services Network Adapter Settings.txt
===================================================================
--- ../List Terminal Services Network Adapter Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Network Adapter Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Lists Terminal Services network adapter settings, including the maximum number of connections allowed.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSNetworkAdapterSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Maximum Connections: ", objItem.MaximumConnections
-    print "Network Adapter ID: ", objItem.NetworkAdapterID
-    print "Network Adapter Name: ", objItem.NetworkAdapterName
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List Terminal Services Permission Settings.txt
===================================================================
--- ../List Terminal Services Permission Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Permission Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,20 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Lists Terminal Services permission settings.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSPermissionsSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List Terminal Services Remote Control Settings.txt
===================================================================
--- ../List Terminal Services Remote Control Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Remote Control Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,22 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns information about Terminal Service remote control as configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSRemoteControlSetting")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Level Of Control: ", objItem.LevelOfControl
-    print "Remote Control Policy: ", objItem.RemoteControlPolicy
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List Terminal Services Session Directory Settings.txt
===================================================================
--- ../List Terminal Services Session Directory Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Session Directory Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns configuration information for all the Terminal Service session directories found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSSessionDirectory")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Session Directory Active: ", objItem.SessionDirectoryActive
-    print "Session Directory Cluster Name: ", objItem.SessionDirectoryClusterName
-    print "Session Directory Expose Server IP: ", objItem.SessionDirectoryExposeServerIP
-    print "Session Directory Location: ", objItem.SessionDirectoryLocation
-    print "Setting ID: ", objItem.SettingID
Index: ../List Terminal Services Session Settings.txt
===================================================================
--- ../List Terminal Services Session Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Session Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,27 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns Terminal Service session configuration information.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TSSessionSetting")
-for objItem in colItems:
-    print "Active Session Limit: ", objItem.ActiveSessionLimit
-    print "Broken Connection Action: ", objItem.BrokenConnectionAction
-    print "Broken Connection Policy: ", objItem.BrokenConnectionPolicy
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Disconnected Session Limit: ", objItem.DisconnectedSessionLimit
-    print "Idle Session Limit: ", objItem.IdleSessionLimit
-    print "Reconnection Policy: ", objItem.ReconnectionPolicy
-    print "Setting ID: ", objItem.SettingID
-    print "Terminal Name: ", objItem.TerminalName
-    print "Time Limit Policy: ", objItem.TimeLimitPolicy
Index: ../List Terminal Services Terminal Settings.txt
===================================================================
--- ../List Terminal Services Terminal Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Terminal Settings.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,35 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Lists the Terminal Service configuration settings on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TerminalServiceSetting")
-for objItem in colItems:
-    print "Active Desktop: ", objItem.ActiveDesktop
-    print "Allow TS Connections: ", objItem.AllowTSConnections
-    print "Caption: ", objItem.Caption
-    print "Delete Temp Folders: ", objItem.DeleteTempFolders
-    print "Description: ", objItem.Description
-    print "Direct Connect License Servers: ", objItem.DirectConnectLicenseServers
-    print "Help: ", objItem.Help
-    print "Home Directory: ", objItem.HomeDirectory
-    print "Licensing Description: ", objItem.LicensingDescription
-    print "Licensing Name: ", objItem.LicensingName
-    print "Licensing Type: ", objItem.LicensingType
-    print "Logons: ", objItem.Logons
-    print "Profile Path: ", objItem.ProfilePath
-    print "Server Name: ", objItem.ServerName
-    print "Setting ID: ", objItem.SettingID
-    print "Single Session: ", objItem.SingleSession
-    print "Terminal Server Mode: ", objItem.TerminalServerMode
-    print "User Permission: ", objItem.UserPermission
-    print "Use Temp Folders: ", objItem.UseTempFolders
Index: ../List Terminal Services Terminals.txt
===================================================================
--- ../List Terminal Services Terminals.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Terminal Services Terminals.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,23 +0,0 @@
-###
-###
-###
-### Category1 : Terminal Services
-### Category2 : Retrieving Terminal Service Properties
-### Category3 : 
-### Description : Returns a list of all the Terminal Service terminals on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Terminal")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "fEnable Terminal: ", objItem.fEnableTerminal
-    print "Install Date: ", objItem.InstallDate
-    print "Name: ", objItem.Name
-    print "Status: ", objItem.Status
-    print "Terminal Name: ", objItem.TerminalName
Index: ../List the Boot Configuration Properties of a Computer.txt
===================================================================
--- ../List the Boot Configuration Properties of a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the Boot Configuration Properties of a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Startup and Shutdown
-### Category3 : 
-### Description : Returns boot configuration information for a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_BootConfiguration")
-for objItem in colItems:
-    print "Boot Directory: ", objItem.BootDirectory
-    print "Caption: ", objItem.Caption
-    print "Configuration Path: ", objItem.ConfigurationPath
-    print "Description: ", objItem.Description
-    print "Last Drive: ", objItem.LastDrive
-    print "Name: ", objItem.Name
-    print "Scratch Directory: ", objItem.ScratchDirectory
-    print "Setting ID: ", objItem.SettingID
-    print "Temp Directory: ", objItem.TempDirectory
Index: ../List the Codec Files on a Computer.txt
===================================================================
--- ../List the Codec Files on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the Codec Files on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,50 +0,0 @@
-###
-###
-###
-### Category1 : Applications
-### Category2 : User
-### Category3 : 
-### Description : Uses WMI to return information about all the audio and video codec files installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_CodecFile")
-for objItem in colItems:
-    print "Access Mask: ", objItem.AccessMask
-    print "Archive: ", objItem.Archive
-    print "Caption: ", objItem.Caption
-    print "Compressed: ", objItem.Compressed
-    print "Compression Method: ", objItem.CompressionMethod
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Creation Date: ", objItem.CreationDate
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Drive: ", objItem.Drive
-    print "Eight Dot Three File Name: ", objItem.EightDotThreeFileName
-    print "Encrypted: ", objItem.Encrypted
-    print "Encryption Method: ", objItem.EncryptionMethod
-    print "Extension: ", objItem.Extension
-    print "File Name: ", objItem.FileName
-    print "File Size: ", objItem.FileSize
-    print "File Type: ", objItem.FileType
-    print "FS Creation Class Name: ", objItem.FSCreationClassName
-    print "FS Name: ", objItem.FSName
-    print "Group: ", objItem.Group
-    print "Hidden: ", objItem.Hidden
-    print "Install Date: ", objItem.InstallDate
-    print "In Use Count: ", objItem.InUseCount
-    print "Last Accessed: ", objItem.LastAccessed
-    print "Last Modified: ", objItem.LastModified
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Name: ", objItem.Name
-    print "Path: ", objItem.Path
-    print "Readable: ", objItem.Readable
-    print "Status: ", objItem.Status
-    print "System: ", objItem.System
-    print "Version: ", objItem.Version
-    print "Writeable: ", objItem.Writeable
Index: ../List the Local Time on a Computer.txt
===================================================================
--- ../List the Local Time on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the Local Time on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,26 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Dates and Times
-### Category3 : 
-### Description : Returns information about the local time configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_LocalTime")
-for objItem in colItems:
-    print "Day: ", objItem.Day
-    print "Day Of Week: ", objItem.DayOfWeek
-    print "Hour: ", objItem.Hour
-    print "Milliseconds: ", objItem.Milliseconds
-    print "Minute: ", objItem.Minute
-    print "Month: ", objItem.Month
-    print "Quarter: ", objItem.Quarter
-    print "Second: ", objItem.Second
-    print "Week In Month: ", objItem.WeekInMonth
-    print "Year: ", objItem.Year
Index: ../List the Network Protocols on a Computer.txt
===================================================================
--- ../List the Network Protocols on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the Network Protocols on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,39 +0,0 @@
-###
-###
-###
-### Category1 : Networking
-### Category2 : Client-Side Management
-### Category3 : Retrieving Network Configuration Information
-### Description : Uses WMI to return information about all the network protocols installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_NetworkProtocol")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Connectionless Service: ", objItem.ConnectionlessService
-    print "Description: ", objItem.Description
-    print "Guarantees Delivery: ", objItem.GuaranteesDelivery
-    print "Guarantees Sequencing: ", objItem.GuaranteesSequencing
-    print "Install Date: ", objItem.InstallDate
-    print "Maximum Address Size: ", objItem.MaximumAddressSize
-    print "Maximum Message Size: ", objItem.MaximumMessageSize
-    print "Message Oriented: ", objItem.MessageOriented
-    print "Minimum Address Size: ", objItem.MinimumAddressSize
-    print "Name: ", objItem.Name
-    print "Pseudo Stream Oriented: ", objItem.PseudoStreamOriented
-    print "Status: ", objItem.Status
-    print "Supports Broadcasting: ", objItem.SupportsBroadcasting
-    print "Supports Connect Data: ", objItem.SupportsConnectData
-    print "Supports Disconnect Data: ", objItem.SupportsDisconnectData
-    print "Supports Encryption: ", objItem.SupportsEncryption
-    print "Supports Expedited Data: ", objItem.SupportsExpeditedData
-    print "Supports Fragmentation: ", objItem.SupportsFragmentation
-    print "Supports Graceful Closing: ", objItem.SupportsGracefulClosing
-    print "Supports Guaranteed Bandwidth: ", objItem.SupportsGuaranteedBandwidth
-    print "Supports Multicasting: ", objItem.SupportsMulticasting
-    print "Supports Quality of Service: ", objItem.SupportsQualityofService
Index: ../List the Processes Running on a Computer.txt
===================================================================
--- ../List the Processes Running on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the Processes Running on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,61 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Processes
-### Category3 : Processes and Threads
-### Description : Returns information about all the processes running on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_Process")
-for objItem in colItems:
-    print "Caption: ", objItem.Caption
-    print "Command Line: ", objItem.CommandLine
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Creation Date: ", objItem.CreationDate
-    print "CS Creation Class Name: ", objItem.CSCreationClassName
-    print "CS Name: ", objItem.CSName
-    print "Description: ", objItem.Description
-    print "Executable Path: ", objItem.ExecutablePath
-    print "Execution State: ", objItem.ExecutionState
-    print "Handle: ", objItem.Handle
-    print "Handle Count: ", objItem.HandleCount
-    print "Install Date: ", objItem.InstallDate
-    print "Kernel Mode Time: ", objItem.KernelModeTime
-    print "Maximum Working Set Size: ", objItem.MaximumWorkingSetSize
-    print "Minimum Working Set Size: ", objItem.MinimumWorkingSetSize
-    print "Name: ", objItem.Name
-    print "OS Creation Class Name: ", objItem.OSCreationClassName
-    print "OS Name: ", objItem.OSName
-    print "Other Operation Count: ", objItem.OtherOperationCount
-    print "Other Transfer Count: ", objItem.OtherTransferCount
-    print "Page Faults: ", objItem.PageFaults
-    print "PageFile Usage: ", objItem.PageFileUsage
-    print "Parent Process Id: ", objItem.ParentProcessId
-    print "Peak PageFile Usage: ", objItem.PeakPageFileUsage
-    print "Peak Virtual Size: ", objItem.PeakVirtualSize
-    print "Peak Working Set Size: ", objItem.PeakWorkingSetSize
-    print "Priority: ", objItem.Priority
-    print "Private Page Count: ", objItem.PrivatePageCount
-    print "Process Id: ", objItem.ProcessId
-    print "Quota NonPaged Pool Usage: ", objItem.QuotaNonPagedPoolUsage
-    print "Quota Paged Pool Usage: ", objItem.QuotaPagedPoolUsage
-    print "Quota Peak NonPaged Pool Usage: ", objItem.QuotaPeakNonPagedPoolUsage
-    print "Quota Peak Paged Pool Usage: ", objItem.QuotaPeakPagedPoolUsage
-    print "Read Operation Count: ", objItem.ReadOperationCount
-    print "Read Transfer Count: ", objItem.ReadTransferCount
-    print "Session Id: ", objItem.SessionId
-    print "Status: ", objItem.Status
-    print "Termination Date: ", objItem.TerminationDate
-    print "Thread Count: ", objItem.ThreadCount
-    print "User Mode Time: ", objItem.UserModeTime
-    print "Virtual Size: ", objItem.VirtualSize
-    print "Windows Version: ", objItem.WindowsVersion
-    print "Working Set Size: ", objItem.WorkingSetSize
-    print "Write Operation Count: ", objItem.WriteOperationCount
-    print "Write Transfer Count: ", objItem.WriteTransferCount
Index: ../List the UTC Time on a Computer.txt
===================================================================
--- ../List the UTC Time on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List the UTC Time on a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,26 +0,0 @@
-###
-###
-###
-### Category1 : Scripting Techniques
-### Category2 : Dates and Times
-### Category3 : 
-### Description : Reports the Universal Time Coordinate (UTC) time on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_UTCTime")
-for objItem in colItems:
-    print "Day: ", objItem.Day
-    print "Day Of Week: ", objItem.DayOfWeek
-    print "Hour: ", objItem.Hour
-    print "Milliseconds: ", objItem.Milliseconds
-    print "Minute: ", objItem.Minute
-    print "Month: ", objItem.Month
-    print "Quarter: ", objItem.Quarter
-    print "Second: ", objItem.Second
-    print "Week In Month: ", objItem.WeekInMonth
-    print "Year: ", objItem.Year
Index: ../List Time Zone Information for a Computer.txt
===================================================================
--- ../List Time Zone Information for a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Time Zone Information for a Computer.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,40 +0,0 @@
-###
-###
-###
-### Category1 : Operating System
-### Category2 : Dates and Times
-### Category3 : 
-### Description : Retrieve information about the time zone configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_TimeZone")
-for objItem in colItems:
-    print "Bias: ", objItem.Bias
-    print "Caption: ", objItem.Caption
-    print "Daylight Bias: ", objItem.DaylightBias
-    print "Daylight Day: ", objItem.DaylightDay
-    print "Daylight Day Of Week: ", objItem.DaylightDayOfWeek
-    print "Daylight Hour: ", objItem.DaylightHour
-    print "Daylight Millisecond: ", objItem.DaylightMillisecond
-    print "Daylight Minute: ", objItem.DaylightMinute
-    print "Daylight Month: ", objItem.DaylightMonth
-    print "Daylight Name: ", objItem.DaylightName
-    print "Daylight Second: ", objItem.DaylightSecond
-    print "Daylight Year: ", objItem.DaylightYear
-    print "Description: ", objItem.Description
-    print "Setting ID: ", objItem.SettingID
-    print "Standard Bias: ", objItem.StandardBias
-    print "Standard Day: ", objItem.StandardDay
-    print "Standard Day Of Week: ", objItem.StandardDayOfWeek
-    print "Standard Hour: ", objItem.StandardHour
-    print "Standard Millisecond: ", objItem.StandardMillisecond
-    print "Standard Minute: ", objItem.StandardMinute
-    print "Standard Month: ", objItem.StandardMonth
-    print "Standard Name: ", objItem.StandardName
-    print "Standard Second: ", objItem.StandardSecond
-    print "Standard Year: ", objItem.StandardYear
Index: ../List UPS Information.txt
===================================================================
--- ../List UPS Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List UPS Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,64 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Batteries and Power Supplies
-### Category3 : 
-### Description : Lists information about the uninterruptible power sources attached to a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_UninterruptiblePowerSupply")
-for objItem in colItems:
-    print "Active Input Voltage: ", objItem.ActiveInputVoltage
-    print "Availability: ", objItem.Availability
-    print "Battery Installed: ", objItem.BatteryInstalled
-    print "Can Turn Off Remotely: ", objItem.CanTurnOffRemotely
-    print "Caption: ", objItem.Caption
-    print "Command File: ", objItem.CommandFile
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Estimated Charge Remaining: ", objItem.EstimatedChargeRemaining
-    print "Estimated Run Time: ", objItem.EstimatedRunTime
-    print "First Message Delay: ", objItem.FirstMessageDelay
-    print "Install Date: ", objItem.InstallDate
-    print "Is Switching Supply: ", objItem.IsSwitchingSupply
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Low Battery Signal: ", objItem.LowBatterySignal
-    print "Message Interval: ", objItem.MessageInterval
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    print "Power Fail Signal: ", objItem.PowerFailSignal
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Range 1 Input Frequency High: ", objItem.Range1InputFrequencyHigh
-    print "Range 1 Input Frequency Low: ", objItem.Range1InputFrequencyLow
-    print "Range 1 Input Voltage High: ", objItem.Range1InputVoltageHigh
-    print "Range 1 Input Voltage Low: ", objItem.Range1InputVoltageLow
-    print "Range 2 Input Frequency High: ", objItem.Range2InputFrequencyHigh
-    print "Range 2 Input Frequency Low: ", objItem.Range2InputFrequencyLow
-    print "Range 2 Input Voltage High: ", objItem.Range2InputVoltageHigh
-    print "Range 2 Input Voltage Low: ", objItem.Range2InputVoltageLow
-    print "Remaining Capacity Status: ", objItem.RemainingCapacityStatus
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time On Backup: ", objItem.TimeOnBackup
-    print "Total Output Power: ", objItem.TotalOutputPower
-    print "Type Of Range Switching: ", objItem.TypeOfRangeSwitching
-    print "UPS Port: ", objItem.UPSPort
Index: ../List USB Controller Information.txt
===================================================================
--- ../List USB Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List USB Controller Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,44 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Controllers and Hubs
-### Description : Returns information about all the USB controllers found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_USBController")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Manufacturer: ", objItem.Manufacturer
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Name: ", objItem.Name
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
Index: ../List USB Hub Information.txt
===================================================================
--- ../List USB Hub Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List USB Hub Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,54 +0,0 @@
-###
-###
-###
-### Category1 : Storage
-### Category2 : Disk Drives and Volumes
-### Category3 : Controllers and Hubs
-### Description : Returns information about all the USB hubs found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_USBHub")
-for objItem in colItems:
-    print "Availability: ", objItem.Availability
-    print "Caption: ", objItem.Caption
-    print "Class Code: ", objItem.ClassCode
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    z = objItem.CurrentAlternateSettings
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Current Alternate Settings: ", x
-    print "Current Config Value: ", objItem.CurrentConfigValue
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "Gang Switched: ", objItem.GangSwitched
-    print "Install Date: ", objItem.InstallDate
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Name: ", objItem.Name
-    print "Number Of Configs: ", objItem.NumberOfConfigs
-    print "Number Of Ports: ", objItem.NumberOfPorts
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Code: ", objItem.ProtocolCode
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "Subclass Code: ", objItem.SubclassCode
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "USB Version: ", objItem.USBVersion
Index: ../List User Account Information.txt
===================================================================
--- ../List User Account Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List User Account Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,32 +0,0 @@
-###
-###
-###
-### Category1 : Other Directory Services
-### Category2 : Local Computer and NT 4 Accounts
-### Category3 : User Accounts
-### Description : Returns information about the user accounts found on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_UserAccount")
-for objItem in colItems:
-    print "Account Type: ", objItem.AccountType
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Disabled: ", objItem.Disabled
-    print "Domain: ", objItem.Domain
-    print "Full Name: ", objItem.FullName
-    print "Install Date: ", objItem.InstallDate
-    print "Local Account: ", objItem.LocalAccount
-    print "Lockout: ", objItem.Lockout
-    print "Name: ", objItem.Name
-    print "Password Changeable: ", objItem.PasswordChangeable
-    print "Password Expires: ", objItem.PasswordExpires
-    print "Password Required: ", objItem.PasswordRequired
-    print "SID: ", objItem.SID
-    print "SID Type: ", objItem.SIDType
-    print "Status: ", objItem.Status
Index: ../List Video Controller Properties.txt
===================================================================
--- ../List Video Controller Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Video Controller Properties.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,90 +0,0 @@
-###
-###
-###
-### Category1 : Hardware
-### Category2 : Video and Display
-### Category3 : 
-### Description : Retrieves information about the video controller installed on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_VideoController")
-for objItem in colItems:
-    z = objItem.AcceleratorCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Accelerator Capabilities: ", x
-    print "Adapter Compatibility: ", objItem.AdapterCompatibility
-    print "Adapter DAC Type: ", objItem.AdapterDACType
-    print "Adapter RAM: ", objItem.AdapterRAM
-    print "Availability: ", objItem.Availability
-    z = objItem.CapabilityDescriptions
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Capability Descriptions: ", x
-    print "Caption: ", objItem.Caption
-    print "Color Table Entries: ", objItem.ColorTableEntries
-    print "Config Manager Error Code: ", objItem.ConfigManagerErrorCode
-    print "Config Manager User Config: ", objItem.ConfigManagerUserConfig
-    print "Creation Class Name: ", objItem.CreationClassName
-    print "Current Bits Per Pixel: ", objItem.CurrentBitsPerPixel
-    print "Current Horizontal Resolution: ", objItem.CurrentHorizontalResolution
-    print "Current Number Of Colors: ", objItem.CurrentNumberOfColors
-    print "Current Number Of Columns: ", objItem.CurrentNumberOfColumns
-    print "Current Number Of Rows: ", objItem.CurrentNumberOfRows
-    print "Current Refresh Rate: ", objItem.CurrentRefreshRate
-    print "Current Scan Mode: ", objItem.CurrentScanMode
-    print "Current Vertical Resolution: ", objItem.CurrentVerticalResolution
-    print "Description: ", objItem.Description
-    print "Device ID: ", objItem.DeviceID
-    print "Device Specific Pens: ", objItem.DeviceSpecificPens
-    print "Dither Type: ", objItem.DitherType
-    print "Driver Date: ", objItem.DriverDate
-    print "Driver Version: ", objItem.DriverVersion
-    print "Error Cleared: ", objItem.ErrorCleared
-    print "Error Description: ", objItem.ErrorDescription
-    print "ICM Intent: ", objItem.ICMIntent
-    print "ICM Method: ", objItem.ICMMethod
-    print "Inf Filename: ", objItem.InfFilename
-    print "Inf Section: ", objItem.InfSection
-    print "Install Date: ", objItem.InstallDate
-    print "Installed Display Drivers: ", objItem.InstalledDisplayDrivers
-    print "Last Error Code: ", objItem.LastErrorCode
-    print "Max Memory Supported: ", objItem.MaxMemorySupported
-    print "Max Number Controlled: ", objItem.MaxNumberControlled
-    print "Max Refresh Rate: ", objItem.MaxRefreshRate
-    print "Min Refresh Rate: ", objItem.MinRefreshRate
-    print "Monochrome: ", objItem.Monochrome
-    print "Name: ", objItem.Name
-    print "Number Of Color Planes: ", objItem.NumberOfColorPlanes
-    print "Number Of Video Pages: ", objItem.NumberOfVideoPages
-    print "PNP Device ID: ", objItem.PNPDeviceID
-    z = objItem.PowerManagementCapabilities
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Power Management Capabilities: ", x
-    print "Power Management Supported: ", objItem.PowerManagementSupported
-    print "Protocol Supported: ", objItem.ProtocolSupported
-    print "Reserved System Palette Entries: ", objItem.ReservedSystemPaletteEntries
-    print "Specification Version: ", objItem.SpecificationVersion
-    print "Status: ", objItem.Status
-    print "Status Info: ", objItem.StatusInfo
-    print "System Creation Class Name: ", objItem.SystemCreationClassName
-    print "System Name: ", objItem.SystemName
-    print "System Palette Entries: ", objItem.SystemPaletteEntries
-    print "Time Of Last Reset: ", objItem.TimeOfLastReset
-    print "Video Architecture: ", objItem.VideoArchitecture
-    print "Video Memory Type: ", objItem.VideoMemoryType
-    print "Video Mode: ", objItem.VideoMode
-    print "Video Mode Description: ", objItem.VideoModeDescription
-    print "Video Processor: ", objItem.VideoProcessor
Index: ../List Windows Product Activation Status.txt
===================================================================
--- ../List Windows Product Activation Status.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List Windows Product Activation Status.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,25 +0,0 @@
-###
-###
-###
-### Category1 : Desktop Management
-### Category2 : Windows Activation
-### Category3 : 
-### Description : Returns product activation information for a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_WindowsProductActivation")
-for objItem in colItems:
-    print "Activation Required: ", objItem.ActivationRequired
-    print "Caption: ", objItem.Caption
-    print "Description: ", objItem.Description
-    print "Is NotificationOn: ", objItem.IsNotificationOn
-    print "Product ID: ", objItem.ProductID
-    print "Remaining Evaluation Period: ", objItem.RemainingEvaluationPeriod
-    print "Remaining Grace Period: ", objItem.RemainingGracePeriod
-    print "Server Name: ", objItem.ServerName
-    print "Setting ID: ", objItem.SettingID
Index: ../List WMI Setting Information.txt
===================================================================
--- ../List WMI Setting Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
+++ ../List WMI Setting Information.txt	(revision 0d569724181c75c1181a2ef15cc0d3721741395a)
@@ -1,48 +0,0 @@
-###
-###
-###
-### Category1 : Scripting Techniques
-### Category2 : WMI
-### Category3 : 
-### Description : Returns information about how WMI has been configured on a computer.
-###
-###
-###
-import win32com.client
-strComputer = "."
-objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
-objSWbemServices = objWMIService.ConnectServer(strComputer,"root\cimv2")
-colItems = objSWbemServices.ExecQuery("Select * from Win32_WMISetting")
-for objItem in colItems:
-    print "ASP Script Default Namespace: ", objItem.ASPScriptDefaultNamespace
-    print "ASP Script Enabled: ", objItem.ASPScriptEnabled
-    z = objItem.AutorecoverMofs
-    if z is None:
-        a = 1
-    else:
-        for x in z:
-            print "Autorecover Mofs: ", x
-    print "AutoStart Win9X: ", objItem.AutoStartWin9X
-    print "Backup Interval: ", objItem.BackupInterval
-    print "Backup Last Time: ", objItem.BackupLastTime
-    print "Build Version: ", objItem.BuildVersion
-    print "Caption: ", objItem.Caption
-    print "Database Directory: ", objItem.DatabaseDirectory
-    print "Database Max Size: ", objItem.DatabaseMaxSize
-    print "Description: ", objItem.Description
-    print "Enable Anon Win9x Connections: ", objItem.EnableAnonWin9xConnections
-    print "Enable Events: ", objItem.EnableEvents
-    print "Enable Startup Heap Preallocation: ", objItem.EnableStartupHeapPreallocation
-    print "High Threshold On Client Objects: ", objItem.HighThresholdOnClientObjects
-    print "High Threshold On Events: ", objItem.HighThresholdOnEvents
-    print "Installation Directory: ", objItem.InstallationDirectory
-    print "Last Startup Heap Preallocation: ", objItem.LastStartupHeapPreallocation
-    print "Logging Directory: ", objItem.LoggingDirectory
-    print "Logging Level: ", objItem.LoggingLevel
-    print "Low Threshold On Client Objects: ", objItem.LowThresholdOnClientObjects
-    print "Low Threshold On Events: ", objItem.LowThresholdOnEvents
-    print "Max Log File Size: ", objItem.MaxLogFileSize
-    print "Max Wait On Client Objects: ", objItem.MaxWaitOnClientObjects
-    print "Max Wait On Events: ", objItem.MaxWaitOnEvents
-    print "Mof Self-Install Directory: ", objItem.MofSelfInstallDirectory
-    print "Setting ID: ", objItem.SettingID
Index: json.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- json.py	(date 1594083614407)
+++ json.py	(date 1594083614407)
@@ -0,0 +1,6 @@
+import json
+
+with open('links.json') as jsonfile:
+    parsed = json.load(jsonfile)
+
+print json.dumps(parsed, indent=2, sort_keys=True)
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1594083458107)
+++ .idea/vcs.xml	(date 1594083458107)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1594084120690)
+++ .idea/misc.xml	(date 1594084120690)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (venv)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/scripts.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/scripts.iml	(date 1594084120524)
+++ .idea/scripts.iml	(date 1594084120524)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (venv)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1594083458138)
+++ .idea/modules.xml	(date 1594083458138)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/scripts.iml" filepath="$PROJECT_DIR$/.idea/scripts.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: teste.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- teste.py	(date 1594084178490)
+++ teste.py	(date 1594084178490)
@@ -0,0 +1,1 @@
+print("ok!")
\ No newline at end of file
